<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="modelengine.jade.knowledge.mapper.KnowledgeConfigMapper">
    <resultMap id="BaseResultMap" type="modelengine.jade.knowledge.po.KnowledgeConfigPo">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="userId" column="user_id"/>
        <result property="groupId" column="group_id"/>
        <result property="apiKey" column="api_key"/>
        <result property="isDefault" column="is_default"/>
        <result property="createdAt" column="created_at"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="updatedBy" column="updated_by"/>
        <result property="knowledgeConfigId" column="knowledge_config_id" />
    </resultMap>

    <sql id="Base_Column_List">
        id, name, user_id, group_id, api_key, is_default, created_at, created_by, updated_at, updated_by, knowledge_config_id
    </sql>

    <insert id="insert" parameterType="modelengine.jade.knowledge.po.KnowledgeConfigPo">
        insert into t_app_engine_user_knowledge
        (name, user_id, group_id, api_key, is_default, created_by, created_at, updated_by, updated_at, knowledge_config_id)
        values (#{name}, #{userId}, #{groupId}, #{apiKey}, #{isDefault}, #{createdBy}, #{createdAt}, #{updatedBy},
        #{updatedAt}, #{knowledgeConfigId})
    </insert>

    <update id="update" parameterType="modelengine.jade.knowledge.po.KnowledgeConfigPo">
        update t_app_engine_user_knowledge
        <set>
            name = #{name}, group_id = #{groupId}, api_key = #{apiKey}, is_default = #{isDefault}, updated_at = #{updatedAt}
        </set>
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from t_app_engine_user_knowledge where id = #{id}
    </delete>

    <select id="listByCondition" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_app_engine_user_knowledge where 1 = 1
        <if test="cond.userId != null">
            and user_id = #{cond.userId}
        </if>
        <if test="cond.id != null">
            and id = #{cond.id}
        </if>
        <if test="cond.groupId != null">
            and group_id = #{cond.groupId}
        </if>
        <if test="cond.isDefault != null">
            and is_default = #{cond.isDefault}
        </if>
        <if test="cond.apiKey != null">
            and api_key = #{cond.apiKey}
        </if>
        <if test="cond.knowledgeConfigId != null">
            and knowledge_config_id = #{cond.knowledgeConfigId}
        </if>
        ORDER BY updated_at DESC, created_at DESC
    </select>

    <update id="updateOthersIsDefaultFalse" parameterType="modelengine.jade.knowledge.condition.KnowledgeConfigQueryCondition">
        update t_app_engine_user_knowledge
        <set>
            is_default = 0
        </set>
        where group_id = #{groupId} and user_id = #{userId}
        <if test="id != null">
            and id != #{id}
        </if>
    </update>

    <update id="updateNewestIsDefaultTrue" parameterType="modelengine.jade.knowledge.condition.KnowledgeConfigQueryCondition">
        update t_app_engine_user_knowledge
        <set>
            is_default = 1
        </set>
        where id = (
            select id
            from t_app_engine_user_knowledge
            where group_id = #{groupId} and user_id = #{userId}
            <if test="id !=null">
                and id != #{id}
            </if>
            order by updated_at desc
            limit 1
        )
    </update>
</mapper>