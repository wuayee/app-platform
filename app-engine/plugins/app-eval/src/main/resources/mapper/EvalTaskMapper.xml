<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huawei.jade.app.engine.eval.mapper.EvalTaskMapper" >
    <resultMap id="EvalTask" type="com.huawei.jade.app.engine.eval.po.EvalTaskPo" >
        <result column="id" property="id"/>
        <result column="app_id" property="appId"/>
        <result column="author" property="author"/>
        <result column="pass_score" property="passScore"/>
        <result column="create_time" property="createTime"/>
        <result column="status" property="status"/>
        <result column="algorithm_id" property="evalAlgorithmId"/>
        <result column="start_node_id" property="startNodeId"/>
        <result column="end_node_id" property="endNodeId"/>
        <result column="version" property="version"/>
        <result column="pass_rate" property="passRate"/>
        <result column="start_time" property="startTime"/>
        <result column="finish_time" property="finishTime"/>
    </resultMap>

    <insert id="insert" parameterType="com.huawei.jade.app.engine.eval.po.EvalTaskPo" useGeneratedKeys="true" keyProperty="id">
        insert into eval_task ("app_id", "author", "pass_score", "create_time", "status", "algorithm_id", "start_node_id", "end_node_id", "version", "pass_rate", "start_time", "finish_time")
        values (#{appId}, #{author}, #{passScore}, #{createTime}, #{status}, #{evalAlgorithmId}, #{startNodeId}, #{endNodeId}, #{version}, #{passRate}, #{startTime}, #{finishTime})
    </insert>

    <update id="setStartById" parameterType="com.huawei.jade.app.engine.eval.po.EvalTaskPo">
        update eval_task
        set start_time = #{startTime}, status = #{status}
        where id = #{id}
    </update>

    <update id="setFinishById" parameterType="com.huawei.jade.app.engine.eval.po.EvalTaskPo">
        update eval_task
        set status = #{status}, pass_rate = #{passRate} , finish_time = #{finishTime}
        where id = #{id}
    </update>

    <select id="getById" resultMap="EvalTask">
        select "id", "app_id", "author", "pass_score", "create_time", "status", "algorithm_id", "start_node_id", "end_node_id", "version", "pass_rate", "start_time", "finish_time"
        from eval_task
        where id = #{id}
        order by create_time desc
    </select>

    <select id="getByConditions" resultMap="EvalTask" parameterType="com.huawei.jade.app.engine.eval.query.EvalTaskListQuery">
        select "id", "app_id", "author", "pass_score", "create_time", "status", "algorithm_id", "start_node_id", "end_node_id", "version", "pass_rate", "start_time", "finish_time"
        from eval_task
        where
        app_id = #{appId}
        <if test="version != null">
            and version like '%${version}%'
        </if>
        <if test="author != null">
            and author like '%${author}%'
        </if>
        <if test="createTimeFrom != null">
            and create_time >= #{createTimeFrom}
        </if>
        <if test="createTimeTo != null">
            and #{createTimeTo} >= create_time
        </if>
        <if test="statusList != null and statusList.size() > 0">
            and status in
            <foreach collection="statusList" item="item" index="index" open="(" separator=", " close=")">
                #{item}
            </foreach>
        </if>
        order by create_time desc
    </select>

    <select id="getCountByConditions" resultType="java.lang.Long" parameterType="com.huawei.jade.app.engine.eval.query.EvalTaskListQuery">
        select count(*)
        from eval_task
        where
        app_id = #{appId}
        <if test="version != null">
            and version like '%${version}%'
        </if>
        <if test="author != null">
            and author like '%${author}%'
        </if>
        <if test="createTimeFrom != null">
            and create_time >= #{createTimeFrom}
        </if>
        <if test="createTimeTo != null">
            and #{createTimeTo} >= create_time
        </if>
        <if test="statusList != null and statusList.size() > 0">
            and status in
            <foreach collection="statusList" item="item" index="index" open="(" separator=", " close=")">
                #{item}
            </foreach>
        </if>
    </select>
</mapper>