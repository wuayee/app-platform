/*---------------------------------------------------------------------------------------------
 *  Copyright (c) 2025 Huawei Technologies Co., Ltd. All rights reserved.
 *  This file is a part of the ModelEngine Project.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { rectangle } from './rectangle.js';
import { svgDrawer } from './drawers/svgDrawer.js';
import { customizedDrawer } from './drawers/htmlDrawer.js';
import { CURSORS, isPointInRect, sleep } from './src/index.js';

/**
 * svg装载器
 * 可以装在任何svg格式图形，并转换成elsa图形，与其他elsa图形互动操作
 * 辉子 2020
 */
let svg = (id, x, y, width, height, parent) => {
    let self = rectangle(id, x, y, width, height, parent, svgDrawer);
    self.type = "svg";
    self.borderWidth = 0;
    self.backColor = "transparent";
    self.setSvg = (content) => {
        self.text = content;
        self.invalidate();
        self.drawer.init();
    };

    self.addDetection(["backColor", "borderColor", "borderWidth"], (property, value, preValue) => {
        self.setSvg(self.getSvg());
    });
    self.getSvg = () => {
        return svgExample;
    }
    return self;
};

/**
 * 手绘线条
 * 辉子 2022
 */
const customShape = (id, x, y, width, height, parent) => {
    const bufferSize = 4;
    const off = 1;
    const self = rectangle(id, x, y, width, height, parent, customizedDrawer("svg"));
    self.type = "customShape";
    self.ignoreDock = true;
    self.element.style.overflow = "visible";

    // self.container = self.page.id;
    self.backColor = self.focusBackColor = "transparent";
    self.borderWidth = 0;
    self.lineWidth = 3;
    self.width = self.height = 300;
    self.lines = [];
    self.paths = [];
    self.dasharray = '0';
    self.fill = 'none';
    self.fillOpacity = 'transparent';
    // self.drawing = true;

    //-----------------drawing var-------------
    let data;
    let bound = undefined;//get free line bound
    let points = [];
    let path = undefined;
    let ct;
    //-----------------------------------------



    function addToEraserCommand(position) {
        let dirty = position.context.shapes.find(s => s.shape === self);
        if (!dirty) {
            dirty = { shape: self, lines: {} };
            dirty.lines.preValue = [];
            self.lines.forEach(line => {
                const copy = [];
                line.forEach(p => copy.push([p[0], p[1]]));
                dirty.lines.preValue.push(copy);
            });
            position.context.command = "eraser";
            position.context.shapes.push(dirty);
        }
    }

    const onMouseMove = self.onMouseMove;
    self.onMouseMove = position => {
        if (self.page.eraser && self.page.erasePrecise) {
            self.page.cursor = CURSORS.ERASER;
        } else {
            onMouseMove.call(self, position);
        }
    };

    const onMouseUp = self.onMouseUp;
    self.onMouseUp = position => {
        if (self.drawing === true) {
            self.done();
        } else {
            onMouseUp.call(self, position);
        }
    };

    const onMouseDrag = self.onMouseDrag;
    self.onMouseDrag = (position) => {
        if (self.drawing === true) {
            self.addPoint(position.x, position.y);
        } else {
            if (self.page.eraser) {
                self.erase(position);
            } else {
                onMouseDrag.call(self, position);
            }
        }
    };

    self.erase = (position) => {
        const eraserWidth = 1 * self.page.eraser;

        // 宽高需要与cursorDrawer中的保持一致.
        const rect = eraserRect(position.x - 2 * eraserWidth, position.y - 2 * eraserWidth, 4 * eraserWidth, 4 * eraserWidth);
        const newLines = [];
        let newLine = [];
        let erased = false;

        self.lines.forEach(line => {
            for (let i = 0; i < line.length - 1; i++) {
                if (line[i] === undefined || line[i + 1] === undefined) {
                    continue;
                }
                let point = { x: (line[i][0] + self.x + off), y: (line[i][1] + self.y + off) };
                let pointNext = { x: (line[i + 1][0] + self.x + off), y: (line[i + 1][1] + self.y + off) };
                // 简单排除不可能相交情况
                if ((point.x < rect.x && pointNext.x < rect.x)
                    || (point.y < rect.y && pointNext.y < rect.y)
                    || (point.x > rect.x + rect.width && pointNext.x > rect.x + rect.width)
                    || (point.y > rect.y + rect.height && pointNext.y > rect.y + rect.height)) {
                    newLine.push(line[i]);
                    continue;
                }

                const pointInRect = rect.in(point);
                const pointNextInRect = rect.in(pointNext);

                // 两个点都在范围内，直接丢弃当前点，交给下一个点计算
                if (pointInRect && pointNextInRect) {
                    // 已有的线加入结果列表
                    if (newLine.length > 1) {
                        newLines.push(newLine);
                    }
                    newLine = [];
                    erased = true;
                    continue;
                }

                const lineSeg = lineSegment(point, pointNext);
                const crossPoints = rect.intersectionsWithLine(lineSeg);

                // 没有交点
                if (crossPoints.length === 0) {
                    newLine.push(line[i]);
                    continue;
                }

                // 不能直接parseInt设置为整数，会导致freeLine在删除的过程中跳变.
                crossPoints.forEach(p => {
                    p.x = p.x - self.x - off;
                    p.x = Math.floor(p.x * 1000) / 1000; // 保留3位有效数字.不四舍五入.
                    p.y = p.y - self.y - off;
                    p.y = Math.floor(p.y * 1000) / 1000; // 保留3位有效数字.不四舍五入.
                })

                // 一个交点
                if (crossPoints.length === 1) {
                    // 当前点在范围内，删除当前点，结束前一条线，以交点为起点开始下一条
                    if (pointInRect) {
                        if (newLine.length > 1) {
                            newLines.push(newLine);
                        }
                        newLine = [];
                        newLine.push([crossPoints[0].x, crossPoints[0].y]);
                        erased = true;
                        continue;
                    }
                    // 下一个点在范围内
                    if (pointNextInRect) {
                        newLine.push(line[i]);
                        newLine.push([crossPoints[0].x, crossPoints[0].y]);
                        newLines.push(newLine);
                        newLine = [];
                        erased = true;
                        continue;
                    }
                    // 极端情况，交点在边界，无视
                    newLine.push(line[i]);
                    continue;
                }
                // 两个交点情况，橡皮擦横穿，找到合适的交点，分割线段
                let key = 'x';
                if (Math.abs(pointNext.x - point.x) < 0.01) {
                    key = 'y';
                }
                newLine.push(line[i]);
                let oldLineEnd, newLineStart;
                // 同号
                if (pointNext[key] - point[key] < 0 === crossPoints[1][key] - crossPoints[0][key] < 0) {
                    oldLineEnd = [crossPoints[0].x, crossPoints[0].y];
                    newLineStart = [crossPoints[1].x, crossPoints[1].y];
                } else {
                    oldLineEnd = [crossPoints[1].x, crossPoints[1].y];
                    newLineStart = [crossPoints[0].x, crossPoints[0].y];
                }
                newLine.push(oldLineEnd);
                newLines.push(newLine);
                newLine = [];
                newLine.push(newLineStart);
                erased = true;
            }
            // 添加最后一个点
            const lastPointIndex = line.length - 1;
            let lastPoint = { x: (line[lastPointIndex][0] + self.x + off), y: (line[lastPointIndex][1] + self.y + off) };
            if (!rect.in(lastPoint)) {
                newLine.push(line[lastPointIndex]);
            } else {
                erased = true;
            }
            // 遍历完成，确认最后一条线长度
            if (newLine.length > 1) {
                newLines.push(newLine);
            }
            newLine = [];
        });
        if (erased) {
            addToEraserCommand(position);
            self.lines = newLines;
            self.invalidate();
        }
    };

    // const getMenuScript = self.getMenuScript;
    // self.getMenuScript = () => {
    //     const menus = getMenuScript.call(self);
    //     menus.push({});
    //     //优先级
    //     const erasers = { text: "擦除", menus: [], width: 30 };
    //     erasers.menus.push({ text: "•  小", action: shape =self.get("focusBorderColor")age.eraser = 3 });
    //     erasers.menus.push({ text: "■  大", action: shape => shape.page.eraser = 6 });
    //     // erasers.menus.push({ text: "▇ 大", action: shape => shape.page.eraser = 6 });
    //     menus.push(erasers);
    //     return menus;
    // };

    self.newLine = () => {
        buffer = [];
        points = [];
        path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        self.element.appendChild(path);
        path.setAttribute("stroke", self.focusBorderColor);// self.getBorderColor());
        path.setAttribute("stroke-width", self.lineWidth);
        path.setAttribute("stroke-dasharray", self.dasharray);
        path.setAttribute("fill", self.fill);
        path.setAttribute("fill-opacity", self.fillOpacity);
        path.setAttribute("stroke-linecap", "round");
        path.setAttribute("stroke-linejoin", "round");
        self.readyToClose = false;
        // self.invalidate();
    };

    self.addPoint = (x1, y1, inCollaboration) => {
        !path && self.newLine();
        const dx = x1 - x;
        const dy = y1 - y;
        // const THRESH = 5;
        // if(dx<-THRESH || dx>(self.width-THRESH) || dy<-THRESH || dy>(self.height-THRESH)){
        //     self.done();
        //     return;
        // }

        bound === undefined && (bound = [dx, dy, dx, dy]);
        if (points.length === 2) {
            // data = "M" + dx + " " + dy;
            //bound = [dx, dy, dx, dy];
        }

        // points.push([dx, dy]);
        appendToBuffer({ x: dx, y: dy });
        updateSvgPath(path);

        //update bound
        if (dx < bound[0]) {
            bound[0] = dx;
        }
        if (dx > bound[2]) {
            bound[2] = dx;
        }
        if (dy < bound[1]) {
            bound[1] = dy;
        }
        if (dy > bound[3]) {
            bound[3] = dy;
        }

        // (!inCollaboration) && self.page.graph.collaboration.invoke({
        //     method: "add_freeline_point",
        //     page: self.page.id,
        //     shape: self.id,
        //     value: { x: x1, y: y1, dx, dy },
        //     mode: self.page.mode
        // }, () => {
        // });

    };

    let buffer = [];
    const appendToBuffer = (pt) => {
        buffer.push(pt);
        while (buffer.length > bufferSize) {
            buffer.shift();
        }
    };
    const getAveragePoint = offset => {
        const len = buffer.length;
        if (len % 2 === 1 || len >= bufferSize) {
            let totalX = 0, totalY = 0, count = 0;
            for (let i = offset; i < len; i++) {
                count++;
                totalX += buffer[i].x;
                totalY += buffer[i].y;
            }
            return {
                x: totalX / count, y: totalY / count
            }
        }
        return null;
    };

    const updateSvgPath = function (path) {
        let pt = getAveragePoint(0);
        if (pt) {
            points.push([pt.x, pt.y]);
            if (points.length > 1) {
                data += " L" + pt.x + " " + pt.y;
            } else {
                data = "M" + pt.x + " " + pt.y;
            }
            path.setAttribute("d", data);
        }
    };

 
    self.drawer.drawBorder = () => {
        self.drawer.parent.style.border = self.isFocused ? "1px dashed steelblue" : "";
    };

    self.drawer.containsBack = (x, y) => {
        const paths = self.paths;
        const point = self.element.createSVGPoint();
        point.x = x - self.x;
        point.y = y - self.y;
        for (let i = 0; i < paths.length; i++) {
            const p = paths[i];
            let inFill = p.isPointInFill(point);
            let inStroke = p.isPointInStroke(point);
            if (inStroke || inFill) {
                return true;
            }
        }
        return false;
    };

    const draw = self.drawer.draw;
    self.drawer.draw = () => {
        draw.call(self.drawer);
        let rateX = 1, rateY = 1;
        if (self.originWidth) {
            rateX = self.width / self.originWidth;
            rateY = self.height / self.originHeight;
        }
        self.lines.forEach((line, j) => {
            if (self.paths[j] === undefined) {
                self.paths[j] = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                self.element.appendChild(self.paths[j]);
            }
            self.paths[j].setAttribute("stroke", self.getBorderColor());
            self.paths[j].setAttribute("stroke-width", self.lineWidth);
            self.paths[j].setAttribute("fill", "rgba(255,255,255,0.01)");
            self.paths[j].setAttribute("stroke-linecap", "round");
            self.paths[j].setAttribute("stroke-linejoin", "round");
            
            buffer = [];
            ct = { x: line[0][0], y: line[0][1] };
            line.forEach((p, i) => {
                const x = (p[0] + off - (self.isFocused ? 1 : 0)) * rateX,
                    y = (p[1] + off - (self.isFocused ? 1 : 0)) * rateY;
                if (i === 1) {
                    data = "M" + x + " " + y;
                }
                // appendToBuffer({x, y});
                if (i > 1) {
                    data += " L" + x + " " + y;
                }
            });
            self.paths[j].setAttribute("d", data);
        })
    };

    self.getOffSet = () => off;
    const initConnectors = self.initConnectors;
    self.initConnectors = () => {

        initConnectors.call(self);
        self.connectors.forEach((c, i) => {
            switch (c.type) {
                case "rightBottom":
                    c.radius = 12;
                    c.getX = (s, con) => s.width - con.radius;
                    c.getY = (s, con) => s.height - con.radius;
                    c.draw = (context, x, y) => {
                        c.refresh();
                        context.fillStyle = "steelblue";
                        context.strokeStyle = "white";
                        const step = 5;
                        context.beginPath();
                        context.beginPath();
                        context.moveTo(x + c.x + c.radius, y + c.y);
                        context.lineTo(x + c.x, y + c.y + c.radius);
                        context.lineTo(x + c.x + c.radius, y + c.y + c.radius);
                        context.closePath();
                        context.fill();
                        context.stroke();
                    }
                    break;
                case "rotate":
                    c.getY = (s, con) => 0;
                    break;
                default:
                    c.visible = false;

            }
        });
    }

    const doneDetection = shape => {
        const ACTIVE_TIME = 1;
        const detection = {};
        detection.run = async function (inCollaboration) {
            shape.detection = this;
            shape.readyToClose = true;
            await sleep(ACTIVE_TIME);
            if (!shape.readyToClose) {
                return;
            }//new line started
            if (shape.detection !== this) {
                return;
            }

            // const disableReact = shape.page.disableReact;
            // shape.page.disableReact = false;
            shape.page.ignoreReact(() => {
                shape.moveTo(bound[0] - off + x, bound[1] - off + y);
                shape.resize(bound[2] - bound[0] + 2 * off, bound[3] - bound[1] + 2 * off);
                shape.lines.forEach(line => {
                    line.forEach(p => {
                        p[0] -= bound[0];
                        p[1] -= bound[1];
                    })
                })
                shape.originWidth = shape.width;
                shape.originHeight = shape.height;
            });

            if (!inCollaboration) {
                (!shape.page.dirties) && (shape.page.dirties = {});
                (!shape.page.dirties[shape.id]) && (shape.page.dirties[shape.id] = {});
                shape.page.dirties[shape.id]["lines"] = shape.lines;//手动添加dirty信息
            }
            shape.invalidate();
        }
        return detection;
    };

    self.initialize = () => {
        self.drawing = true;
        self.newLine();
        self.addPoint(x, y);
    }

    self.currentPoints = () => points;

    self.done = (inCollaboration) => {
        self.drawing = false;
        if (!points || points.length < 2) {
            self.remove();
            return;
        }
        self.lines.push(points);
        self.paths.push(path);
        path = undefined;
        self.page.ignoreReact(() => {
            self.moveTo(bound[0] - off + x, bound[1] - off + y);
            self.resize(bound[2] - bound[0] + 2 * off, bound[3] - bound[1] + 2 * off);
            self.lines.forEach(line => {
                line.forEach(p => {
                    p[0] -= bound[0];
                    p[1] -= bound[1];
                })
            })
            self.originWidth = self.width;
            self.originHeight = self.height;
            self.lines = JSON.parse(JSON.stringify(self.lines));
            self.invalidate();
        });
        // const detection = doneDetection(self);
        // detection.run(inCollaboration);
        // (!inCollaboration) && self.page.graph.collaboration.invoke({
        //     method: "freeline_done",
        //     page: self.page.id,
        //     shape: self.id,
        //     mode: self.page.mode,
        //     value: { lines: self.lines }
        // }, () => {
        // });
    };

    // self.containerAllowed = container => container === self.page;
    // self.serializedFields.batchAdd("lines", "originWidth", "originHeight", "lineWidth");
    self.addDetection(["lines"], function (property, value, preValue) {
        self.paths.forEach(p => p.remove());
        self.paths = [];
    });
    return self;
};

let svgExample = "<svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px'" + "viewBox='0 0 595.3 595.3' enable-background='new 0 0 595.3 595.3' xml:space='preserve'><g>" + "<path fill='#C89333' d='M336,138.6l-0.9-0.7l-0.9,0.6c-4.4,3.1-11.1,3.5-16.5,1.1c-1.5-0.7-8.6-4.5-7.1-15.1" + "c0.5-3.4,2.3-5.5,3.7-6.7c0.9,2.2,2.6,4.5,5.7,6.1c1.9,0.9,3.9,1.4,5.9,1.4c0.8,0,1.6-0.1,2.4-0.2c2.2-0.4,3.9-1.3,5-2.6" + "c0.5-0.6,0.5-1.4,0.1-2c-0.6-0.8-1.8-0.7-2.4,0c-0.8,1-2.3,1.5-3.3,1.7c-2.2,0.4-4.5,0.1-6.5-0.9c-3.2-1.6-4.4-4.2-4.8-6.3" + "c-0.6-3.5,0.8-7.2,2.5-8.9c3.5-3.4,8-2.2,8.2-2.1l2,0.6l0-2c-0.2-9.5,5.7-14.4,9.2-16.5c3.9-2.3,8.4-3.5,13.1-3.4" + "c15.1,0.5,19.3,12.6,19.4,13.1c1.6,4.9,1.6,9-0.1,12.1c-2.2,4.1-6.5,5.4-6.6,5.4c-6.9,2-10.6-2-11.6-3.2c-2.1-2.8-2.2-6.6-0.2-9.5" + "c3.2-4.5,9.3-3.5,9.6-3.4c0.8,0.2,1.6-0.4,1.8-1.2c0.2-0.8-0.4-1.6-1.2-1.8c-0.3-0.1-8.3-1.5-12.6,4.6c-2.8,4-2.7,9.2,0.3,13.1" + "c1.3,1.6,6.1,6.8,14.8,4.3c0.2-0.1,5.5-1.6,8.4-6.8c1.2-2.2,1.7-4.7,1.7-7.5c5.9-0.4,6.7,4.6,6.8,5.2l0.2,2.1l1.9-0.9" + "c3.3-1.5,6.5-1.5,9.9,0.3c2.7,1.4,3.5,3.7,3.7,5.1c-1.5,0.6-2.8,1.6-3.6,2.9c-1,1.5-1.3,3.3-0.9,5c0.5,1.9,1.5,3.3,2.9,4.2" + "c1.2,0.7,2.5,0.9,3.5,0.9c1.2,0,2-0.2,2.2-0.3c0.8-0.2,1.3-1.1,1-1.9c-0.2-0.8-1.1-1.3-1.9-1c0,0-2,0.5-3.3-0.3" + "c-0.8-0.4-1.3-1.2-1.5-2.3c-0.2-0.9,0-1.8,0.5-2.7c0.6-1,1.7-1.7,2.9-2l0.2,0c5.4-1.4,12.7,3.1,19.7,7.4c3.7,2.3,7.2,4.4,10.5,5.8" + "c6.4,2.7,14.2-0.7,21.1-0.6c0.3,0,0.3,0.4,0,0.4c-6.5,1.3-11.9,6.4-22,4.6c-6.2-1.1-13.5-1.5-19.5-1.4c-5.9,0.1-9.5,0.8-15.1,2.7" + "c-3.6,1.2-9.9,2.1-13.8,1c-7.1-2-11.3-0.2-21.8,5.6C348,147.4,336.1,138.7,336,138.6z M308.5,532.2v41.1h-4.2v-33.8h-3v33.8H297" + "v-33.8h-3v33.8h-4.2v-41.1c0-3.9,3.2-7,7-7h0.2h4.2h0.2C305.3,525.2,308.5,528.4,308.5,532.2z M304.3,532.2c0-1.6-1.3-2.8-2.8-2.8" + "h-4.6c-1.6,0-2.8,1.3-2.8,2.8v3.1h10.2V532.2z M212.4,296.6c-7.6-4.6-11.3-11.9-17-10.4l-0.2,0c-1.3,0.3-2.5,1.1-3.1,2.1" + "c-0.6,0.9-0.8,1.9-0.5,2.9c0.3,1.2,0.8,2,1.6,2.5c1.5,0.9,3.6,0.3,3.6,0.3c0.9-0.2,1.8,0.2,2,1.1c0.2,0.9-0.2,1.7-1.1,2" + "c-0.2,0.1-1.1,0.3-2.4,0.3c-1.1,0-2.5-0.2-3.7-0.9c-1.6-0.9-2.6-2.4-3.1-4.5c-0.4-1.8-0.1-3.7,0.9-5.4c0.9-1.4,2.3-2.5,3.9-3.2" + "c-0.2-1.5-1.1-4-4-5.5c-3.7-1.9-7-1.9-10.6-0.3l-2,0.9l-0.3-2.2c-0.1-0.6-0.9-6-7.3-5.6c0.1,3-0.5,5.7-1.8,8c-3,5.6-8.7,7.3-9,7.3" + "c-9.4,2.7-14.5-2.8-15.9-4.6c-3.2-4.1-3.3-9.8-0.3-14.1c4.7-6.6,13.2-5,13.5-5c0.9,0.2,1.4,1,1.3,1.9c-0.2,0.9-1,1.4-1.9,1.3" + "c-0.3-0.1-6.8-1.2-10.3,3.7c-2.2,3.1-2.1,7.2,0.2,10.2c1,1.4,5,5.6,12.5,3.5c0.1,0,4.7-1.4,7-5.8c1.8-3.4,1.9-7.8,0.1-13" + "c-0.2-0.6-4.7-13.6-20.9-14.1c-5-0.2-9.9,1.1-14,3.6c-3.8,2.3-10,7.6-9.8,17.8l0,2.2l-2.1-0.6c-0.2-0.1-5.1-1.4-8.8,2.3" + "c-1.8,1.8-3.3,5.8-2.7,9.6c0.4,2.3,1.7,5.1,5.2,6.8c2.2,1.1,4.7,1.4,7,1c1.2-0.2,2.7-0.7,3.6-1.8c0.6-0.7,1.6-0.8,2.3-0.2" + "c0.7,0.6,0.8,1.6,0.2,2.3c-1.2,1.5-3,2.5-5.5,2.9c-0.9,0.2-1.7,0.2-2.6,0.2c-2.2,0-4.4-0.5-6.4-1.5c-3.4-1.6-5.2-4.1-6.2-6.5" + "c-1.4,1.3-3.4,3.6-3.9,7.2c-1.6,11.4,6.1,15.5,7.6,16.3c5.7,2.6,13,2.1,17.7-1.2l1-0.7l0.9,0.7c0.1,0.1,12.9,9.4,24.4,3" + "c11.2-6.2,15.8-8.2,23.4-6.1c4.2,1.2,10.9,0.3,14.8-1c6-2.1,9.8-3.3,16.2-2.9c9.9,0.6,21.4-7.8,21.4-7.8S216.4,299.1,212.4,296.6z" + "M500.6,370c-7.6,0.3-16,3.7-23,0.7c-3.8-1.6-7.8-4-12-6.6c-8.1-5-16.4-10.1-22.6-8.5l-0.2,0c-1.4,0.3-2.6,1.1-3.4,2.3" + "c-0.6,1-0.8,2-0.6,3.1c0.3,1.3,0.9,2.1,1.7,2.6c1.6,0.9,3.8,0.4,3.8,0.4c0.9-0.3,1.9,0.3,2.1,1.2c0.3,0.9-0.3,1.9-1.2,2.1" + "c-0.2,0.1-1.2,0.3-2.5,0.3c-1.2,0-2.6-0.2-4-1c-1.7-1-2.8-2.6-3.4-4.8c-0.5-1.9-0.1-4,1-5.7c1-1.5,2.4-2.7,4.2-3.4" + "c-0.3-1.6-1.2-4.3-4.3-5.8c-3.9-2-7.5-2.1-11.3-0.3l-2.2,1l-0.3-2.4c-0.1-0.6-1-6.4-7.7-5.9c0.1,3.2-0.6,6.1-1.9,8.6" + "c-3.2,6-9.3,7.7-9.6,7.8c-10,2.9-15.5-3-16.9-4.9c-3.4-4.4-3.5-10.4-0.3-15c5-7.1,14-5.4,14.4-5.3c0.9,0.2,1.5,1.1,1.4,2" + "c-0.2,0.9-1.1,1.5-2,1.4c-0.3-0.1-7.3-1.3-11,3.9c-2.3,3.3-2.3,7.7,0.2,10.9c1.1,1.5,5.4,6,13.3,3.7c0.1,0,5-1.5,7.5-6.2" + "c1.9-3.6,2-8.3,0.1-13.9c-0.2-0.6-5-14.5-22.2-15c-5.4-0.2-10.5,1.2-14.9,3.9c-4,2.4-10.7,8.1-10.5,18.9l0,2.3l-2.2-0.7" + "c-0.2-0.1-5.4-1.5-9.4,2.4c-2,1.9-3.5,6.2-2.8,10.2c0.5,2.5,1.8,5.5,5.5,7.3c2.3,1.1,5,1.5,7.4,1c1.2-0.2,2.9-0.8,3.8-1.9" + "c0.4-0.5,1.1-0.8,1.8-0.6c1.3,0.4,1.6,1.8,0.9,2.8c-1.3,1.6-3.2,2.6-5.8,3.1c-0.9,0.2-1.9,0.3-2.8,0.3c-2.3,0-4.7-0.5-6.8-1.6" + "c-3.6-1.8-5.5-4.4-6.6-6.9c-1.5,1.4-3.7,3.9-4.2,7.7c-1.8,12.2,6.5,16.6,8.1,17.3c6.1,2.8,13.8,2.3,18.8-1.3l1-0.7l1,0.7" + "c0.1,0.1,13.8,10.1,26,3.2c11.9-6.7,16.8-8.8,24.9-6.5c4.5,1.3,11.6,0.3,15.8-1.1c6.4-2.2,10.5-2.9,17.2-3.1" + "c6.9-0.1,15.1,0.3,22.3,1.6c11,1.9,17.1-3.3,24.1-5.1C501.2,370.6,501.1,370,500.6,370z'/><path fill='#D22027' d='M331.2,262h-26.8v-15.1h26.8V262z M331.2,274.5h-26.8v16.7h26.8V274.5z M369.9,274.5h-26.8v16.7h26.8V274.5" + "z M304.6,385.3L304.6,385.3l-4.9-5.1l-0.1-0.1l-4.8,4.8l-0.1,0.1l5,5l0.1,0.1L304.6,385.3z M369.9,246.9h-26.8V262h26.8V246.9z" + "M294.9,91.1L294.9,91.1l4.9,5.1l0.1,0.1l4.8-4.8l0.1-0.1l-5-5l-0.1-0.1L294.9,91.1z M315.3,214.2l0,0.1h43.9v-13.8h-43.7" + "L315.3,214.2z M441.8,238L441.8,238l4.9,5.1l0.1,0.1l4.8-4.8l0.1-0.1l-5-5l-0.1-0.1L441.8,238z M157.8,238.3l-5-5l-0.1-0.1" + "l-4.8,4.8l-0.1,0.1l5,5l0.1,0.1L157.8,238.3L157.8,238.3z M350.9,462.3c3.9,3.8,6,8.9,5.9,14.2c-0.1,5.3-2.4,10.2-6.5,13.7" + "c-4.6,4.1-10.5,6.4-16.1,6.4c-4.1,0-7.6-1.2-10.2-3.6l-8.1-7.4l-1.5,1.5l1.2,1.2c4.5,4.3,4.8,11.3,0.8,15.5c-1.9,2-4.6,3.1-7.5,3.1" + "c-2.7,0-5.3-1-7.4-2.7v6.9h0.8c1.8,0,3.2,1.4,3.2,3.2v4.1c0,1.8-1.4,3.2-3.2,3.2H296c-1.8,0-3.2-1.4-3.2-3.2v-4.1" + "c0-1.8,1.4-3.2,3.2-3.2h0.8v-7c-2.1,1.7-4.6,2.6-7.2,2.6c-2.8,0-5.4-1.1-7.2-3c-4-4.2-3.5-11.1,1-15.4l0.6-0.6l-2-1.9l-7.8,7.2" + "c-2.5,2.3-5.9,3.5-9.9,3.5c-5.5,0-11.3-2.4-15.9-6.5c-3.9-3.5-6-8.3-6.1-13.5c-0.1-5.5,2.1-10.6,6.2-14.6c8.2-7.9,20.1-9,26.5-2.5" + "l7.3,7.5l1.7-1.6l-1.1-1.1c-4.5-4.4-4.8-11.3-0.8-15.5c1.9-2,4.5-3,7.3-3c2.7,0,5.3,1,7.4,2.7v-5.9h-2.8c-0.8,0-1.1-1.1-1.1-2.1" + "c0-0.5,0.1-1,0.3-1.4c-0.2-0.4-0.3-0.9-0.3-1.4c0-1.1,0.3-2.1,1.1-2.1h2.8v-0.3L173.9,312.4c5.8,1.5,13.5,0.1,17.5-1.2" + "c1.6-0.5,3-1,4.2-1.4l95.3,95.3l8.9-8.9l8.6,8.6l28.9-28.9c2,5.7,6.1,9.5,10.1,11.4l0,0c0.8,0.3,1.5,0.6,2.3,0.9l-47.5,47.5h1.9" + "c0.8,0,1.1,1.1,1.1,2.1c0,0.5-0.1,1-0.3,1.4c0.2,0.4,0.3,0.9,0.3,1.4c0,1.1-0.3,2.1-1.1,2.1h-2.8v6.2c2.1-1.9,4.8-2.9,7.6-2.9" + "c2.9,0,5.6,1.1,7.5,3.1c1.9,2,2.9,4.6,2.8,7.4c-0.1,3-1.4,6-3.6,8.2l-1.2,1.2l1,1l9-8.1C331.2,452.9,342.9,454.5,350.9,462.3z" + " M325.3,476.4l2.1,2c1.3,1.2,3,2,4.7,2c1.3,0,2.4-0.4,3.2-1.1c0.9-0.8,1.4-1.9,1.4-3c0-1.1-0.5-2.1-1.4-2.9" + "c-0.8-0.7-1.9-1.1-3.1-1.1c-1.8,0-3.5,0.7-4.8,2L325.3,476.4z M319.7,481.8l7.9,7.2c4.2,3.8,12.9,2.5,19-2.9c2.9-2.6,4.5-6,4.6-9.7" + "c0.1-3.8-1.4-7.4-4.2-10.1c-5.8-5.7-14.3-7.2-18.7-3.3l-8.7,7.9l1.8,1.7l2.2-2.2c2.3-2.3,5.5-3.6,8.7-3.6c2.6,0,4.9,0.9,6.7,2.4" + "c2.1,1.8,3.2,4.3,3.2,7c0,2.7-1.1,5.3-3.2,7.2c-1.8,1.7-4.3,2.6-6.9,2.6c-3.1,0-6.3-1.3-8.6-3.5l-2.2-2.1L319.7,481.8z M288,491.7" + "l-0.8,0.7c-2.3,2.2-2.7,5.6-0.8,7.6c0.8,0.8,1.9,1.3,3.2,1.3c1.5,0,3.1-0.7,4.2-1.8l1.2-1.2L288,491.7z M288,469.4l-7.8,7.4" + "l7.7,7.3l7.6-7.3L288,469.4z M295.3,454.8l-1.6-1.5c-1.2-1.1-2.7-1.8-4.3-1.8c-1.3,0-2.5,0.5-3.3,1.3c-1.9,2-1.6,5.4,0.7,7.6" + "l1.3,1.2L295.3,454.8z M306.7,465.9l-7.4-7.2l-7.2,6.9l7.5,7.3L306.7,465.9z M291.9,487.8l7,6.7l7.4-7.2l-6.9-6.7L291.9,487.8z" + " M310.3,483.3l7.1-7l-6.8-6.6l-7.2,6.9L310.3,483.3z M313.9,456.6c0-1.3-0.4-2.5-1.3-3.4c-0.9-0.9-2.1-1.4-3.5-1.4" + "c-1.5,0-3.1,0.6-4.3,1.7h0l-1.5,1.5l7.4,7.2l1.3-1.3C313.2,459.7,313.9,458.1,313.9,456.6z M272.2,476.8l-3.3-3.1" + "c-1.1-1.1-2.6-1.7-4-1.7c-1.4,0-2.6,0.5-3.4,1.5c-0.9,1-1.4,2.4-1.3,3.7c0.1,1.2,0.6,2.2,1.5,2.9c0.8,0.7,1.9,1,3.1,1" + "c1.8,0,3.7-0.8,5.1-2.1L272.2,476.8z M276.2,472.9l2.1-2l-7.3-7.5c-1.7-1.7-4.1-2.6-6.8-2.6c-3.9,0-8.4,1.8-11.9,5.2" + "c-3,2.9-4.6,6.6-4.5,10.5c0.1,3.7,1.6,7,4.3,9.5c5.9,5.4,14.3,6.8,18.3,3l7.5-7l-1.7-1.6l-2.6,2.5c-2.4,2.3-5.6,3.6-8.9,3.6" + "c-2.5,0-4.9-0.8-6.7-2.3c-2-1.7-3.3-4.1-3.5-6.8c-0.2-2.8,0.8-5.6,2.7-7.8c1.9-2.2,4.6-3.3,7.5-3.3c2.9,0,5.7,1.1,7.8,3.2" + "L276.2,472.9z M311.6,492.4l-1.3-1.3l-7.3,7.2l1.6,1.5c1.2,1.1,2.7,1.7,4.2,1.7c1.4,0,2.6-0.5,3.5-1.4" + "C314.2,498.1,313.9,494.6,311.6,492.4z M94.4,260.8l0.2,0.1l-0.2,0.1c0,0-2.4,1.8-3.6,3.6c-0.8,1.2-2.2,2.1-3.6,2.4" + "c0.6,1.4,0.6,3.2-0.1,4.6c-1,2-1.3,4.9-1.3,5l0,0.2l-0.2-0.1c0,0-2.3-1.8-4.5-2.4c-1.3-0.4-2.6-1.5-3.3-2.7" + "c-1.1,1.1-2.9,1.6-4.4,1.4c-2.2-0.3-5.1,0.4-5.1,0.4l-0.2,0.1l0.1-0.2c0,0,0.9-2.8,0.8-5c-0.1-1.4,0.5-2.9,1.5-3.9" + "c-1.3-0.7-2.4-2.2-2.7-3.6c-0.5-2.2-2-4.7-2.1-4.7l-0.1-0.2l0.2,0c0,0,2.9-0.1,5-0.9c1.4-0.5,3.1-0.5,4.4,0.2" + "c0.2-1.5,1.3-3,2.7-3.8c1.9-1.1,3.8-3.4,3.8-3.4l0.1-0.2l0.1,0.2c0,0,0.9,2.8,2.4,4.5c0.9,1.2,1.4,2.9,1.2,4.3" + "c1.5-0.2,3.3,0.3,4.4,1.4C91.7,259.7,94.4,260.8,94.4,260.8z M83.2,263.1c2.7-0.5,5-1.3,6-1.7c-1.1,0-3.5-0.1-6.2,0.4" + "c-0.7,0.1-1.4,0.3-2.1,0.4l-0.2,0c-0.1,0-0.2,0-0.3-0.1c-0.1-0.1-0.1-0.2-0.1-0.3c0-0.1,0-0.1,0-0.1c0.2-0.8,0.3-1.6,0.4-2.3" + "c0.3-2.7,0.2-5.1,0.1-6.1c-0.3,1-1,3.3-1.4,6c-0.1,0.7-0.1,1.4-0.2,2.2l0,0c0,0.1-0.1,0.3-0.2,0.3c-0.1,0.1-0.3,0.1-0.4,0l0,0" + "c-0.6-0.4-1.3-0.7-2-1.1c-2.4-1.2-4.7-1.9-5.7-2.1c0.8,0.6,2.7,2.1,5.2,3.3c0.7,0.3,1.4,0.6,2.1,0.9c0.1,0.1,0.2,0.2,0.2,0.3" + "c0,0.1,0,0.3-0.1,0.4l-0.1,0.1c-0.5,0.5-1,0.9-1.5,1.4c-1.9,1.9-3.3,3.9-3.9,4.7c0.9-0.6,2.9-1.9,4.8-3.8c0.5-0.5,1-1.1,1.5-1.7" + "c0.1-0.1,0.3-0.2,0.5-0.1c0.2,0,0.3,0.2,0.3,0.3c0.3,0.6,0.6,1.3,0.9,1.8c1.3,2.3,2.8,4.1,3.4,4.9c-0.3-1-1-3.2-2.3-5.5" + "c-0.3-0.6-0.7-1.1-1-1.7l0,0c-0.1-0.1-0.1-0.3,0-0.4c0.1-0.1,0.2-0.2,0.4-0.2C81.8,263.3,82.5,263.2,83.2,263.1z M247.1,42.7" + "l-0.2,0l0.1-0.2c0,0,1.7-2.4,2.2-4.6c0.3-1.3,1.3-2.6,2.5-3.4c-1-1-1.7-2.8-1.6-4.3c0.2-2.2-0.6-5-0.7-5.1l-0.1-0.2l0.2,0.1" + "c0,0,2.8,0.8,5.1,0.6c1.5-0.1,3.1,0.4,4.2,1.4c0.7-1.3,2.1-2.5,3.6-2.9c2.2-0.5,4.6-2.1,4.6-2.2l0.2-0.1l0,0.2c0,0,0.1,2.9,1,5" + "c0.6,1.4,0.5,3.2-0.1,4.5c1.5,0.2,3,1.2,3.8,2.6c1.2,1.9,3.5,3.7,3.5,3.7l0.2,0.1l-0.2,0.1c0,0-2.8,1-4.5,2.5" + "c-1.1,0.9-2.7,1.4-4.1,1.3c0.2,1.5-0.3,3.3-1.4,4.4c-1.5,1.6-2.6,4.4-2.6,4.4l-0.1,0.2l-0.1-0.2c0,0-1.7-2.4-3.6-3.6" + "c-1.2-0.8-2.1-2.1-2.4-3.5c-1.3,0.7-3.2,0.8-4.7,0.1C250.1,42.9,247.1,42.7,247.1,42.7z M257.1,37c-2.4,1.3-4.3,2.8-5.1,3.4" + "c1-0.3,3.3-1,5.7-2.3c0.7-0.3,1.3-0.7,2-1.1c0.2-0.1,0.3-0.1,0.5,0c0.1,0.1,0.2,0.2,0.2,0.4c0.1,0.7,0.2,1.4,0.4,2" + "c0.6,2.6,1.5,4.7,1.9,5.6c0-1-0.1-3.3-0.6-5.9c-0.1-0.6-0.3-1.3-0.5-1.9l0-0.1c-0.1-0.2,0-0.3,0.1-0.4c0.1-0.1,0.3-0.1,0.4-0.1" + "c0.7,0.1,1.4,0.2,2.1,0.3c2.7,0.3,5.2,0.2,6.2,0.1c-1-0.3-3.3-1.1-6.1-1.4c-0.7-0.1-1.4-0.1-2.2-0.2l-0.2,0c-0.1,0-0.2-0.1-0.3-0.2" + "c-0.1-0.1-0.1-0.2,0-0.3c0,0,0-0.1,0-0.1c0.4-0.7,0.7-1.4,1-2.1c1.1-2.5,1.6-4.8,1.8-5.9c-0.6,0.8-1.9,2.8-3,5.4" + "c-0.3,0.7-0.5,1.3-0.8,2l0,0c-0.1,0.1-0.2,0.2-0.3,0.3c-0.1,0-0.3,0-0.4-0.1l0,0c-0.5-0.6-1-1.1-1.6-1.6c-2-1.8-4-3.1-4.9-3.6" + "c0.6,0.8,2,2.8,4,4.6c0.5,0.5,1.1,1,1.7,1.5c0.1,0.1,0.1,0.3,0.1,0.4c0,0.1-0.1,0.3-0.2,0.3l-0.1,0.1" + "C258.3,36.3,257.7,36.6,257.1,37z M377.2,427.7l0.2,0.1l-0.2,0.1c0,0-2.4,1.8-3.6,3.6c-0.8,1.2-2.2,2.1-3.6,2.4" + "c0.6,1.4,0.6,3.2-0.1,4.6c-1,2-1.3,4.9-1.3,5l0,0.2l-0.2-0.1c0,0-2.3-1.8-4.5-2.4c-1.3-0.4-2.6-1.5-3.3-2.7" + "c-1.1,1.1-2.9,1.6-4.4,1.4c-2.2-0.3-5.1,0.4-5.1,0.4l-0.2,0.1l0.1-0.2c0,0,0.9-2.8,0.8-5c-0.1-1.4,0.5-2.9,1.5-3.9" + "c-1.3-0.7-2.4-2.2-2.7-3.6c-0.5-2.2-2.1-4.7-2.1-4.7l-0.1-0.2l0.2,0c0,0,2.9-0.1,5-0.9c1.4-0.5,3.1-0.5,4.4,0.2" + "c0.2-1.5,1.3-3,2.7-3.8c1.9-1.1,3.8-3.4,3.8-3.4l0.1-0.2l0.1,0.2c0,0,0.9,2.8,2.4,4.5c0.9,1.1,1.4,2.9,1.2,4.3" + "c1.5-0.2,3.3,0.3,4.4,1.4C374.5,426.6,377.2,427.7,377.2,427.7z M366,430c2.7-0.5,5-1.3,6-1.7c-1.1,0-3.5-0.1-6.2,0.4" + "c-0.7,0.1-1.4,0.3-2.1,0.4l-0.2,0c-0.1,0-0.2,0-0.3-0.1c-0.1-0.1-0.2-0.2-0.1-0.3c0-0.1,0-0.1,0-0.1v0l0,0c0.2-0.8,0.3-1.5,0.4-2.3" + "c0.3-2.7,0.2-5.1,0.1-6.1c-0.3,1-1,3.3-1.4,6c-0.1,0.7-0.1,1.4-0.2,2.2c0,0.2-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.4,0l0,0" + "c-0.7-0.4-1.3-0.8-2-1.1c-2.4-1.2-4.7-1.9-5.7-2.1c0.8,0.6,2.7,2.1,5.2,3.3c0.7,0.3,1.4,0.6,2.1,0.9c0.1,0.1,0.2,0.2,0.2,0.3" + "c0,0.1,0,0.3-0.1,0.4l-0.1,0.1c-0.5,0.5-1,0.9-1.5,1.4c-1.9,1.9-3.3,3.9-3.9,4.7c0.9-0.6,2.9-1.9,4.8-3.8c0.5-0.5,1-1.1,1.6-1.7" + "c0.1-0.1,0.2-0.1,0.3-0.1c0,0,0.1,0,0.1,0c0.2,0,0.3,0.2,0.4,0.3c0.3,0.6,0.6,1.2,0.9,1.8c1.3,2.3,2.8,4.1,3.4,4.9" + "c-0.3-1-1-3.2-2.3-5.5c-0.3-0.6-0.6-1.1-1-1.7l0,0c-0.1-0.1-0.1-0.3,0-0.5c0.1-0.1,0.2-0.2,0.4-0.2" + "C364.5,430.2,365.3,430.1,366,430z M431.1,175c0,0,3.3-2.6,5-5.4c1.1-1.8,3.2-3.2,5.2-3.6c-1-1.9-1.1-4.6-0.3-6.6" + "c1.3-2.9,1.4-7.2,1.4-7.2l0-0.2l0.2,0.1c0,0,3.5,2.4,6.6,3.1c2.1,0.5,4.1,2.1,5.1,4c1.5-1.6,4-2.5,6.2-2.3c3.2,0.3,7.3-0.8,7.3-0.8" + "l0.2-0.1l-0.1,0.2c0,0-1.2,4.1-0.9,7.3c0.2,2-0.7,4.3-2,5.8c1.9,1,3.5,3.2,3.9,5.4c0.6,3.1,2.8,6.7,2.8,6.8l0.1,0.2l-0.2,0" + "c0,0,0,0,0,0c-0.1,0-4.3,0-7.2,1.1c-1.9,0.7-4.3,0.6-6.1-0.3c-0.3,2.1-1.9,4.4-3.8,5.5c-2.8,1.6-5.5,4.8-5.5,4.9l-0.1,0.2l-0.1-0.2" + "c0,0-1.4-4-3.4-6.5c-1.3-1.5-1.9-3.8-1.7-5.8c-2.1,0.3-4.6-0.4-6.3-1.8c-2.4-2.1-6.4-3.5-6.4-3.6l-0.2-0.1L431.1,175z M447.3,171.5" + "c-4,0.8-7.4,2.1-8.6,2.7c1.3,0,4.9,0.1,9-0.7c1-0.2,2.1-0.5,3.2-0.8c0,0,0,0,0.1,0c0.2,0,0.3,0.1,0.4,0.2c0.1,0.1,0.2,0.3,0.2,0.5" + "c0,0.1,0,0.1,0,0.2c-0.2,1-0.4,2-0.5,2.9c-0.6,4.1-0.4,7.7-0.3,9.1c0.5-1.2,1.7-4.7,2.3-8.8c0.2-1,0.3-2.1,0.3-3.2l0,0" + "c0-0.2,0.2-0.4,0.4-0.5c0.2-0.1,0.4-0.1,0.6,0c0.9,0.5,1.8,0.9,2.6,1.3c3.7,1.6,7.1,2.4,8.3,2.6c-1-0.8-3.9-2.8-7.5-4.4" + "c-0.8-0.4-1.7-0.7-2.6-1.1l-0.1,0c-0.2-0.1-0.3-0.2-0.4-0.4c0-0.2,0.1-0.4,0.3-0.5c0.8-0.7,1.5-1.4,2.2-2.2" + "c2.9-3.1,4.9-6.2,5.5-7.3c-1.1,0.8-4.1,2.9-7,6c-0.7,0.7-1.4,1.5-2.1,2.4l-0.2,0.2c-0.1,0.1-0.2,0.2-0.4,0.2" + "c-0.2,0-0.3-0.1-0.4-0.2c0-0.1-0.1-0.1-0.1-0.2l0,0c-0.5-1-1-2-1.6-3c-2.1-3.6-4.5-6.3-5.4-7.3c0.4,1.3,1.6,4.7,3.7,8.3" + "c0.5,0.9,1.1,1.8,1.7,2.6c0.1,0.2,0.1,0.4,0.1,0.6c-0.1,0.2-0.2,0.3-0.4,0.4l0,0l0,0C449.4,171.2,448.4,171.3,447.3,171.5z" + " M127.5,164.1l-0.2-0.1l0.2-0.1c0,0,3.8-1.9,6-4.3c1.4-1.5,3.7-2.5,5.7-2.5c0,0,0.1,0,0.1,0c-0.6-2.1-0.2-4.7,1.1-6.6" + "c1.8-2.6,2.9-6.7,2.9-6.8l0.1-0.2l0.2,0.2c0,0,2.9,3,5.9,4.4c1.9,0.9,3.6,2.9,4.2,4.9c1.8-1.2,4.4-1.6,6.6-1" + "c3.1,0.9,7.3,0.6,7.3,0.6l0.2,0l-0.1,0.2c0,0-2,3.7-2.4,6.9c-0.3,2-1.5,4.1-3.2,5.3c1.7,1.3,2.8,3.8,2.8,6c0,3.2,1.4,7.2,1.4,7.2" + "l0.1,0.2l-0.2,0c0,0-4.1-0.9-7.3-0.4c-2,0.3-4.3-0.3-5.9-1.5c-0.7,2-2.7,3.9-4.8,4.6c-3,1-6.3,3.6-6.4,3.7l-0.2,0.1l0-0.2" + "c0,0-0.5-4.2-2-7c-0.9-1.8-1.1-4.1-0.5-6c-2.1-0.1-4.4-1.3-5.8-3C131.2,166.3,127.6,164.1,127.5,164.1z M147.4,163.9L147.4,163.9" + "c-1.1-0.1-2.2-0.2-3.2-0.2c-4.1,0-7.7,0.6-9,0.9c1.3,0.3,4.8,1,8.9,1.1c1.1,0,2.2,0,3.3-0.1c0.2,0,0.4,0.1,0.5,0.3" + "c0.1,0.2,0.1,0.3,0.1,0.5c0,0.1,0,0.1-0.1,0.2c-0.4,0.9-0.8,1.8-1.1,2.7c-1.4,3.9-2,7.5-2.2,8.8c0.7-1.1,2.6-4.2,4-8.1" + "c0.4-1,0.7-2,1-3.1l0,0c0.1-0.2,0.3-0.4,0.5-0.4c0.2,0,0.4,0,0.6,0.2c0.8,0.6,1.5,1.2,2.3,1.8c3.3,2.3,6.5,3.8,7.6,4.3" + "c-0.8-1-3.2-3.5-6.5-5.9c-0.7-0.5-1.5-1.1-2.4-1.6l-0.1,0c-0.2-0.1-0.3-0.3-0.3-0.5c0-0.2,0.2-0.4,0.4-0.5c0.9-0.5,1.8-1.1,2.6-1.7" + "c3.4-2.4,6-5.1,6.9-6.1c-1.2,0.5-4.6,2-8,4.5c-0.8,0.6-1.7,1.2-2.5,1.9l-0.2,0.2c-0.1,0.1-0.3,0.1-0.4,0.1c-0.2,0-0.3-0.1-0.3-0.3" + "c0-0.1-0.1-0.1-0.1-0.2l0,0c-0.3-1.1-0.6-2.2-0.9-3.2c-1.3-3.9-3.1-7.1-3.8-8.2c0.1,1.3,0.6,4.9,1.9,8.9c0.3,1,0.7,2,1.1,2.9" + "c0.1,0.2,0,0.4-0.1,0.6C147.8,163.8,147.6,163.9,147.4,163.9L147.4,163.9z M495.8,320.1l0.2,0.1l-0.2,0.1c0,0-4.2,2-6.6,4.5" + "c-1.5,1.6-3.9,2.6-6.1,2.6c0,0-0.1,0-0.1,0c0.6,2.3,0,5.2-1.5,7.1c-2.1,2.8-3.5,7.2-3.5,7.2l-0.1,0.2l-0.1-0.2c0,0-3.1-3.5-6.2-5.1" + "c-2-1-3.6-3.1-4.2-5.2c-1.9,1.3-5,1.7-7.3,0.9c-3.3-1.1-7.9-1-8-1l-0.2,0l0.1-0.2c0,0,2.3-4,2.9-7.5c0.3-2.2,1.7-4.3,3.5-5.6" + "c-1.8-1.5-3-4.1-3.1-6.4c0-3.5-1.7-7.8-1.7-7.9l-0.1-0.2l0.2,0c0,0,4.6,0.8,8,0.2c2.3-0.4,4.9,0.3,6.7,1.7c0.8-2.2,2.9-4.3,5.3-5" + "c3.3-1.1,6.9-4,7-4l0.2-0.1l0,0.2c0,0,0.6,4.6,2.2,7.7c1.1,2.1,1.2,4.9,0.4,7c2.3,0.1,5,1.5,6.4,3.4" + "C491.9,317.5,495.8,320,495.8,320.1z M474.5,319.8c1.1,0.1,2.3,0.2,3.4,0.2c4.7,0.2,8.7-0.5,10.1-0.8c-1.4-0.3-5.4-1.3-10-1.4" + "c-1.1,0-2.2,0-3.4,0l-0.3,0c-0.2,0-0.3-0.1-0.4-0.2c-0.1-0.1-0.2-0.3-0.1-0.5c0-0.1,0-0.2,0-0.2l0,0c0.5-1.2,0.9-2.3,1.3-3.4" + "c1.4-4.4,1.9-8.4,2.1-9.8c-0.7,1.2-2.7,4.7-4.1,9.1c-0.3,1-0.7,2.2-1,3.3c-0.1,0.2-0.2,0.4-0.4,0.5c-0.2,0.1-0.4,0.1-0.6-0.1l0,0" + "c-0.9-0.8-1.8-1.6-2.7-2.3c-3.6-2.8-7.2-4.6-8.5-5.2c0.9,1.1,3.5,4.1,7.1,6.9c0.9,0.7,1.9,1.4,2.9,2.1c0.2,0.2,0.2,0.3,0.2,0.5" + "c0,0.2-0.1,0.4-0.3,0.5c-0.1,0-0.1,0.1-0.2,0.1c-1,0.5-1.9,1.1-2.8,1.7c-3.9,2.5-6.7,5.3-7.7,6.3c1.3-0.5,5-2,8.9-4.5" + "c1-0.6,1.9-1.3,2.9-2.1c0.2-0.1,0.5-0.1,0.7-0.1c0.2,0.1,0.4,0.3,0.4,0.5c0.2,1.1,0.5,2.1,0.8,3.1c1.3,4.2,3.2,7.6,3.9,8.8" + "c-0.1-1.4-0.5-5.2-1.8-9.4c-0.3-1-0.7-1.9-1-2.9c0,0,0-0.1,0-0.1c-0.1-0.2-0.1-0.4,0.1-0.6C474.1,319.8,474.3,319.8,474.5,319.8z" + " M239.5,414.8c0.6,0.9,0.6,2.1,0.1,3c-0.5,1-1.5,1.6-2.6,1.6c-0.9,0-3.6,0.2-5.5,1c-1.1,0.4-2.3,0.7-3.6,0.7c-0.3,0-0.7,0-1-0.1" + "c-0.8,1.7-2.2,3.1-3.7,4.1c-1.7,1-3.5,3.1-4.1,3.8c-0.6,0.7-1.4,1.2-2.4,1.2c-0.2,0-0.3,0-0.5,0c-1.1-0.2-2-0.9-2.3-1.9" + "c-0.3-0.8-1.4-3.4-2.7-4.9c-1-1.2-1.7-2.7-2.1-4.2c-1.8-0.3-3.5-1-4.9-2.1c-1.5-1.2-4.1-2.3-4.9-2.6c-1-0.3-1.8-1.2-2-2.3" + "c-0.2-1.1,0.2-2.2,1-2.9c0.7-0.6,2.7-2.4,3.7-4.1c0.8-1.4,2.1-2.7,3.5-3.5c-0.3-1.8-0.1-3.7,0.5-5.4c0.7-1.8,0.9-4.6,1-5.5" + "c0-1.1,0.6-2.1,1.6-2.6c0.4-0.2,0.9-0.3,1.4-0.3c0.6,0,1.1,0.2,1.6,0.5c0.8,0.5,3.1,1.9,5.1,2.3c1.7,0.4,3.2,1.2,4.5,2.4" + "c1.4-0.7,3.1-1.2,4.6-1.2c0.2,0,0.4,0,0.6,0c0.2,0,0.4,0,0.5,0c2.3,0,5-0.8,5-0.8c0.3-0.1,0.6-0.1,0.9-0.1c0.8,0,1.5,0.3,2.1,0.8" + "c0.8,0.8,1.1,1.9,0.8,2.9c-0.2,0.9-0.8,3.6-0.6,5.5c0.2,1.6-0.1,3.3-0.8,4.8c1.3,1.3,2.3,3.1,2.7,4.9" + "C237.6,411.6,239,414,239.5,414.8z M237,416.4c0,0-2.1-3.2-2.7-6.1c-0.5-2.1-2.1-4-3.7-4.7c1.2-1.3,2-3.3,1.8-5.3" + "c-0.3-2.9,0.7-6.6,0.7-6.6s-3.1,0.9-5.8,0.9c-0.3,0-0.5,0-0.7,0c-0.1,0-0.3,0-0.4,0c-2,0-4.1,1-5.2,2.3c-0.8-1.6-2.6-3.1-4.6-3.6" + "c-2.9-0.6-6.1-2.7-6.1-2.7s-0.1,3.8-1.2,6.5c-0.8,2-0.5,4.5,0.4,6c-1.7,0.3-3.7,1.6-4.7,3.3c-1.5,2.6-4.4,5-4.4,5s3.6,1.2,5.9,3.1" + "c1.3,1,3,1.6,4.5,1.6c0.4,0,0.8,0,1.2-0.1c-0.2,1.7,0.4,3.8,1.6,5.3c1.9,2.2,3.2,5.8,3.2,5.8s2.4-3,4.9-4.5" + "c1.9-1.1,3.1-3.3,3.3-5.1c0.9,0.4,1.9,0.7,3,0.7c0.9,0,1.7-0.1,2.5-0.5C233.2,416.5,237,416.4,237,416.4z M221.7,407.6" + "C221.7,407.6,221.7,407.6,221.7,407.6c-0.4-0.1-0.4-0.5-0.2-0.7l0,0c0.6-0.6,1.3-1.3,1.9-2c3.2-3.6,5.1-7.2,5.1-7.2" + "s-3.4,2.2-6.6,5.8c-0.7,0.7-1.3,1.5-1.8,2.2l-0.1,0.2c-0.1,0.1-0.2,0.1-0.3,0.1c-0.1,0-0.2,0-0.3-0.1c0-0.1-0.1-0.1-0.1-0.2" + "c-0.4-0.8-0.9-1.7-1.5-2.6c-2.5-4.1-5.3-6.8-5.3-6.8s1.2,3.8,3.7,7.9c0.5,0.8,1.1,1.6,1.6,2.4c0,0,0,0,0,0c0.2,0.3,0,0.6-0.3,0.7" + "c0,0,0,0,0,0c-0.9,0.1-1.9,0.3-2.9,0.5c-4.6,1-8.1,2.8-8.1,2.8s0.2,0,0.7,0c1.3,0,4.4-0.1,7.9-0.8c1-0.2,2-0.5,2.9-0.7c0,0,0,0,0,0" + "c0.3,0,0.5,0.2,0.4,0.5c0,0.1,0,0.1,0,0.2c-0.2,0.8-0.3,1.7-0.4,2.6c-0.6,4.7-0.1,8.7-0.1,8.7s1.5-3.7,2-8.4c0.1-1,0.2-2,0.2-2.9" + "l0,0c0-0.2,0.2-0.4,0.5-0.4c0.1,0,0.2,0,0.2,0.1c0.7,0.4,1.6,0.8,2.4,1.1c4.2,1.8,8,2.3,8,2.3s-3-2.4-7.3-4.1" + "C223.3,408.2,222.5,407.9,221.7,407.6z M370.4,64.9c0.2,0.1,0.2,0.4,0,0.5c0,0-0.1,0.1-0.1,0.1c-0.5,0.4-1.1,0.8-1.7,1.3" + "c-2.9,2.4-4.7,4.9-4.7,4.9s2.8-1.3,5.7-3.7c0.6-0.5,1.2-1,1.7-1.5l0,0c0.1-0.1,0.2-0.1,0.2-0.1c0.2,0,0.3,0.1,0.4,0.3" + "c0.2,0.6,0.5,1.3,0.8,1.9c1.5,3.3,3.4,5.7,3.4,5.7s-0.5-3-1.9-6.3c-0.3-0.6-0.6-1.2-0.9-1.8c0,0,0,0,0-0.1c-0.1-0.2,0-0.4,0.2-0.4" + "c0,0,0,0,0.1,0h0c0.7,0,1.4,0,2.2-0.1c3.8-0.3,6.8-1.3,6.8-1.3s-1.9-0.3-4.5-0.3c-0.8,0-1.6,0-2.5,0.1c-0.8,0.1-1.5,0.2-2.2,0.3" + "l-0.2,0c0,0,0,0,0,0c-0.2,0-0.3-0.1-0.3-0.3c0-0.1,0-0.1,0-0.2c0.2-0.7,0.4-1.5,0.6-2.3c0.8-3.7,0.6-6.8,0.6-6.8s-1.4,2.8-2.2,6.5" + "c-0.2,0.8-0.3,1.5-0.4,2.2c0,0,0,0,0,0c0,0.2-0.2,0.3-0.4,0.3c-0.1,0-0.1,0-0.2,0c0,0,0,0,0,0c-0.6-0.4-1.2-0.8-1.9-1.3" + "c-3.2-1.9-6.2-2.8-6.2-2.8s2.2,2.2,5.4,4.1C369,64.2,369.7,64.5,370.4,64.9z M356.2,58.1c-0.5-1-0.5-2.1,0.1-3" + "c0.6-0.9,1.5-1.4,2.5-1.4c0.1,0,0.1,0,0.2,0c0,0,0.4,0,0.9,0c1.3,0,2.4-0.1,3.2-0.4c0.7-0.2,1.5-0.3,2.3-0.3c0.5,0,1,0,1.5,0.1" + "c0.8-1.1,2-2.1,3.2-2.7c1.3-0.6,2.8-2,3.3-2.5c0.6-0.6,1.3-0.9,2.1-0.9c0.3,0,0.5,0,0.8,0.1c1.1,0.3,1.9,1.1,2.1,2.2" + "c0.1,0.6,0.8,2.6,1.6,3.8c0.7,1.1,1.2,2.4,1.4,3.7c1.3,0.5,2.6,1.2,3.5,2.2c1,1,2.8,2.1,3.4,2.4c1,0.5,1.6,1.5,1.7,2.6" + "c0,1.1-0.5,2.1-1.4,2.7c-0.5,0.3-2.3,1.5-3.2,2.7c-0.8,1-1.8,1.8-2.9,2.4c0,1.5-0.4,2.9-1.2,4.2c-0.7,1.2-1.2,3.3-1.3,3.9" + "c-0.2,1.1-1,2-2,2.3c-0.3,0.1-0.6,0.2-1,0.2c-0.7,0-1.5-0.3-2-0.8c-0.5-0.5-2.1-1.8-3.5-2.3c-1.1-0.4-2.1-1.1-3-2" + "c-0.8,0.3-1.7,0.4-2.6,0.4c-0.6,0-1.1-0.1-1.7-0.2c-0.5-0.1-1.1-0.2-1.8-0.2c-1.2,0-2.3,0.2-2.3,0.2c-0.1,0-0.3,0-0.4,0" + "c-0.9,0-1.8-0.4-2.4-1.2c-0.7-0.9-0.8-2-0.4-3c0.3-0.6,1-2.6,1-4c0.1-1.2,0.4-2.4,0.9-3.5c-0.8-1.1-1.3-2.5-1.5-3.8" + "C357.4,60.6,356.5,58.7,356.2,58.1z M358.9,56.7c0,0,1.4,2.7,1.7,5c0.2,1.6,1.3,3.2,2.5,3.9c-1,0.9-1.8,2.4-1.9,3.9" + "c-0.1,2.3-1.3,5.1-1.3,5.1s1.3-0.2,2.8-0.2c0.8,0,1.7,0.1,2.5,0.2c0.3,0.1,0.7,0.1,1,0.1c1.4,0,2.8-0.5,3.6-1.3" + "c0.5,1.2,1.6,2.5,3.1,3.1c2.2,0.9,4.4,2.9,4.4,2.9s0.5-3,1.7-4.9c0.9-1.5,0.9-3.4,0.4-4.7c1.3-0.1,2.9-0.9,3.9-2.1" + "c1.4-1.8,4-3.4,4-3.4s-2.7-1.3-4.3-3c-1-1.1-2.7-1.7-4-1.7c-0.1,0-0.3,0-0.4,0c0.4-1.3,0.2-3.2-0.7-4.5c-1.3-1.9-2-4.8-2-4.8" + "s-2.1,2.2-4.2,3.1c-1.5,0.7-2.7,2.3-3,3.7c-0.8-0.5-1.9-0.8-3-0.8c-0.5,0-1,0.1-1.5,0.2c-1.4,0.4-3,0.5-4.1,0.5" + "C359.3,56.7,358.9,56.7,358.9,56.7z M529.5,282.5c0,0.8-0.4,1.6-1.1,2c-0.4,0.3-1.7,1.2-2.4,2c-0.6,0.7-1.3,1.4-2.2,1.8" + "c0,1.1-0.3,2.2-0.9,3.1c-0.6,0.9-0.9,2.4-1,3c-0.1,0.8-0.7,1.5-1.5,1.7c-0.2,0.1-0.5,0.1-0.7,0.1c-0.6,0-1.1-0.2-1.5-0.6" + "c-0.4-0.3-1.6-1.3-2.6-1.7c-0.8-0.3-1.6-0.9-2.2-1.5c-0.6,0.2-1.3,0.3-1.9,0.3c-0.4,0-0.9,0-1.3-0.1c-0.4-0.1-0.8-0.1-1.4-0.1" + "c-0.9,0-1.7,0.1-1.7,0.1c-0.1,0-0.2,0-0.3,0c-0.7,0-1.4-0.3-1.8-0.9c-0.5-0.6-0.6-1.5-0.3-2.3c0.2-0.4,0.7-1.9,0.8-3" + "c0-0.9,0.3-1.8,0.7-2.6c-0.6-0.9-1-1.9-1.1-2.9c-0.1-1.1-0.8-2.5-1-2.9c-0.4-0.7-0.3-1.6,0.1-2.3c0.4-0.6,1.1-1,1.9-1" + "c0,0,0.1,0,0.2,0c0,0,0.3,0,0.7,0c1,0,1.8-0.1,2.4-0.3c0.6-0.2,1.1-0.3,1.8-0.3c0.4,0,0.8,0,1.1,0.1c0.6-0.9,1.5-1.6,2.4-2" + "c1-0.4,2.1-1.5,2.5-1.9c0.4-0.4,1-0.7,1.6-0.7c0.2,0,0.4,0,0.6,0.1c0.8,0.2,1.4,0.8,1.6,1.6c0.1,0.5,0.6,2,1.2,2.9" + "c0.5,0.8,0.9,1.8,1,2.8c1,0.3,1.9,0.9,2.6,1.7c0.7,0.8,2.1,1.6,2.6,1.8C529,281,529.5,281.7,529.5,282.5z M527.3,282.6" + "c0,0-2-1-3.2-2.3c-0.8-0.8-2-1.3-3-1.3c-0.1,0-0.2,0-0.3,0c0.3-1,0.1-2.4-0.5-3.4c-1-1.4-1.5-3.6-1.5-3.6s-1.6,1.6-3.2,2.3" + "c-1.2,0.5-2,1.7-2.2,2.8c-0.6-0.4-1.4-0.6-2.3-0.6c-0.4,0-0.8,0-1.1,0.2c-1,0.3-2.3,0.4-3.1,0.4c-0.5,0-0.8,0-0.8,0s1.1,2,1.3,3.7" + "c0.2,1.2,1,2.4,1.9,2.9c-0.8,0.6-1.4,1.8-1.4,2.9c-0.1,1.7-1,3.8-1,3.8s0.9-0.1,2.1-0.1c0.6,0,1.3,0,1.9,0.2" + "c0.3,0.1,0.5,0.1,0.8,0.1c1,0,2.1-0.4,2.7-1c0.4,0.9,1.2,1.9,2.3,2.3c1.6,0.6,3.3,2.1,3.3,2.1s0.4-2.2,1.3-3.7" + "c0.7-1.1,0.7-2.6,0.3-3.5c1-0.1,2.2-0.6,2.9-1.6C525.4,283.8,527.3,282.6,527.3,282.6z M518.6,282.5c-0.6,0-1.1,0.1-1.7,0.2l-0.1,0" + "c0,0,0,0,0,0c-0.1,0-0.2-0.1-0.2-0.2c0,0,0-0.1,0-0.1c0.2-0.5,0.3-1.1,0.4-1.7c0.6-2.8,0.5-5.1,0.5-5.1s-1,2.1-1.6,4.9" + "c-0.1,0.6-0.2,1.1-0.3,1.7c0,0,0,0,0,0c0,0.1-0.1,0.2-0.3,0.2c0,0-0.1,0-0.1,0c0,0,0,0,0,0c-0.4-0.3-0.9-0.6-1.4-0.9" + "c-2.4-1.4-4.6-2.1-4.6-2.1s1.6,1.7,4,3.1c0.5,0.3,1,0.6,1.5,0.8c0.1,0.1,0.1,0.3,0,0.4c0,0-0.1,0-0.1,0.1c-0.4,0.3-0.8,0.6-1.2,1" + "c-2.2,1.8-3.5,3.7-3.5,3.7s2.1-1,4.3-2.8c0.5-0.4,0.9-0.8,1.3-1.2l0,0c0.1,0,0.1-0.1,0.2-0.1c0.1,0,0.2,0.1,0.3,0.2" + "c0.2,0.5,0.4,1,0.6,1.5c1.1,2.5,2.5,4.2,2.5,4.2s-0.4-2.2-1.5-4.7c-0.2-0.5-0.4-0.9-0.7-1.4c0,0,0,0,0,0c-0.1-0.1,0-0.3,0.2-0.3" + "c0,0,0,0,0,0h0c0.5,0,1.1,0,1.6-0.1c2.8-0.2,5.1-1,5.1-1s-1.4-0.2-3.3-0.2C519.8,282.4,519.2,282.4,518.6,282.5z M162,103.1" + "c0.2,0.1,0.2,0.3,0.1,0.5c0,0-0.1,0.1-0.1,0.1c-0.4,0.4-0.8,0.9-1.3,1.4c-2.2,2.7-3.4,5.3-3.4,5.3s2.3-1.7,4.5-4.4" + "c0.5-0.6,0.9-1.2,1.3-1.7l0,0c0.1-0.1,0.1-0.1,0.2-0.1c0.1,0,0.3,0,0.4,0.2c0.3,0.5,0.7,1.1,1,1.6c1.9,2.7,4,4.5,4,4.5" + "s-1-2.6-2.9-5.3c-0.4-0.5-0.8-1-1.1-1.5c0,0,0,0,0,0c-0.1-0.2,0-0.4,0.1-0.4c0,0,0,0,0.1,0h0c0.6-0.1,1.3-0.3,2-0.5" + "c3.3-1,5.9-2.4,5.9-2.4s-1.7,0-4.1,0.5c-0.7,0.1-1.4,0.3-2.2,0.5c-0.7,0.2-1.3,0.4-1.9,0.6l-0.2,0.1c0,0,0,0,0,0" + "c-0.1,0-0.3-0.1-0.3-0.2c0-0.1,0-0.1,0-0.1c0.1-0.7,0.1-1.4,0.1-2.2c0-3.4-0.7-6.2-0.7-6.2s-0.7,2.8-0.8,6.2c0,0.7,0,1.4,0.1,2" + "c0,0,0,0,0,0c0,0.2-0.1,0.3-0.3,0.3c0,0-0.1,0-0.1,0c0,0,0,0,0,0c-0.6-0.3-1.2-0.5-1.9-0.8c-3.2-1.2-6-1.4-6-1.4s2.4,1.6,5.6,2.8" + "C160.6,102.7,161.3,102.9,162,103.1z M148,99.5c-0.6-0.8-0.8-1.8-0.4-2.8c0.3-0.9,1.1-1.5,2-1.7c0.1,0,0.1,0,0.2,0" + "c0,0,0.3,0,0.8-0.1c1.2-0.2,2.2-0.6,2.8-0.9c0.6-0.3,1.3-0.6,2-0.7c0.4-0.1,0.9-0.1,1.4-0.2c0.6-1.2,1.4-2.2,2.4-3" + "c1.1-0.8,2.2-2.3,2.5-2.8c0.4-0.6,1-1,1.8-1.2c0.2,0,0.5-0.1,0.7,0c1,0.1,1.9,0.7,2.3,1.6c0.2,0.5,1.2,2.2,2.1,3.2" + "c0.8,0.8,1.5,1.9,1.9,3.1c1.3,0.2,2.5,0.6,3.6,1.4c1.1,0.8,2.9,1.4,3.5,1.5c1,0.3,1.7,1,1.9,2c0.2,1-0.1,2-0.8,2.7" + "c-0.4,0.4-1.8,1.8-2.4,3c-0.5,1-1.3,1.9-2.2,2.7c0.2,1.3,0.1,2.7-0.3,3.9c-0.4,1.2-0.5,3.1-0.5,3.8c0,1-0.5,1.9-1.4,2.4" + "c-0.3,0.2-0.5,0.3-0.8,0.3c-0.7,0.1-1.4,0-1.9-0.3c-0.5-0.3-2.2-1.2-3.5-1.4c-1.1-0.2-2.1-0.6-3-1.3c-0.7,0.4-1.5,0.7-2.3,0.8" + "c-0.5,0.1-1,0.1-1.5,0.1c-0.5,0-1,0.1-1.7,0.2c-1.1,0.2-2,0.6-2.1,0.6c-0.1,0-0.3,0.1-0.4,0.1c-0.8,0.2-1.7-0.1-2.3-0.6" + "c-0.8-0.7-1.1-1.7-0.9-2.6c0.1-0.6,0.4-2.5,0.2-3.8c-0.2-1.1-0.1-2.2,0.2-3.3c-0.9-0.9-1.7-2-2-3.2C149.6,101.6,148.4,100,148,99.5" + "z M150.2,97.8c0,0,1.7,2.1,2.4,4.2c0.5,1.4,1.8,2.6,2.9,3.1c-0.8,1-1.2,2.5-1,3.8c0.3,2.1-0.3,4.8-0.3,4.8s1.1-0.4,2.5-0.7" + "c0.7-0.1,1.5-0.3,2.3-0.2c0.3,0,0.6,0,1-0.1c1.2-0.2,2.4-1,3-1.8c0.7,1,1.9,2,3.3,2.3c2.1,0.4,4.4,1.8,4.4,1.8s0-2.8,0.7-4.8" + "c0.5-1.5,0.2-3.3-0.5-4.3c1.2-0.3,2.5-1.3,3.1-2.6c1-1.9,3-3.8,3-3.8s-2.7-0.7-4.4-2c-1.1-0.8-2.7-1.1-3.9-0.9" + "c-0.1,0-0.3,0.1-0.4,0.1c0.1-1.3-0.4-2.9-1.5-4c-1.5-1.5-2.7-4-2.7-4s-1.5,2.3-3.2,3.6c-1.3,0.9-2,2.6-2,3.8" + "c-0.8-0.3-1.8-0.4-2.8-0.2c-0.5,0.1-0.9,0.2-1.3,0.5c-1.2,0.6-2.6,1-3.6,1.2C150.6,97.8,150.2,97.8,150.2,97.8z M141.7,238.1" + "l-8.6-8.6L291.1,71.4l8.6,8.6l8.9-8.9l18.7,18.7c2-3.4,4.8-6.2,8.4-8.4c1.6-1,3.3-1.8,5.1-2.4l-41.1-41.1L168.5,169.3" + "c0.1,0.6,0.2,1.3,0.2,1.9c0,2.1,0.9,5,1.2,5.8c0.5,1.4,0.2,2.9-0.7,4c-1,1.1-2.4,1.6-3.8,1.3c-1-0.2-3.9-0.6-5.9-0.3" + "c-1.2,0.2-2.4,0.2-3.5,0l-56,56l-0.1,0.1l19.3,19.3c2-3.1,4.8-5.8,8.2-7.9c1.8-1.1,3.7-2,5.7-2.7L141.7,238.1L141.7,238.1z" + " M140.6,245.3c1.1-0.1,2.2-0.1,3.3-0.1c1.9,0.1,3.8,0.3,5.5,0.6l-4.6-4.6L140.6,245.3z M460.3,246.8l-66.1,66.1" + "c-1.9-0.4-3.9-0.6-6-0.7c-6.3-0.2-12.4,1.4-17.7,4.6c-7.3,4.4-11.8,11.4-12.7,19.6c-2.9,0-6.8,0.8-10.3,4.1c-3,2.9-4.7,8-4.5,12.8" + "l-0.7,0.6c-2.2,2-5.1,5.5-5.8,10.8c-0.3,2.2-0.4,4.3-0.2,6.2l-27.8,27.8l-5.6-5.6l0.1-0.1l7.9-7.9l-11.2-11.2L288.6,385l8.1,8.1" + "l-0.1,0.1l-5.7,5.7l-0.1-0.1l-90.2-90.2c1.5-0.2,3.1-0.2,5-0.1c11.3,0.8,23.4-7.7,24.7-8.7c2-1.4,2.6-4.1,1.6-6.2" + "c-1.1-2.2-3.5-3.3-5.9-2.6c-4.3,1.2-9.6,1.8-10.9,1.3c-2.4-1.5-4.4-3.3-6.3-5c-3.1-2.8-6.5-6-10.9-6.3c-1-3.3-3.2-5.9-6.3-7.5" + "c-3.8-1.9-7.6-2.4-11.4-1.6c-1.7-3.3-5-5.9-9.9-6.1c-0.2-1-0.5-2-0.9-3.1c-1.5-4.6-6.1-11.7-14.6-15.3l9.2-9.2L152.8,227l-8,8" + "l-0.1-0.1l-5.5-5.5l0.1-0.1L291.1,77.6l5.6,5.6l-8,8l11.2,11.2l11.1-11.1l-8.1-8.1l5.8-5.8l16.8,16.8c-0.5,1.4-0.8,2.9-1,4.4" + "c-2.6,0.1-5.9,0.9-8.9,3.8c-2.7,2.6-4.3,7.1-4.1,11.4l-0.4,0.4c-2,1.8-4.6,5-5.3,9.8c-1.6,11,4.4,17.8,10,20.4l0,0" + "c6.2,2.8,13.6,2.6,19.3-0.3c2.9,1.8,8.8,4.6,15.5,4.6c3.4,0,7-0.7,10.6-2.7c5-2.8,8.2-4.4,10.8-5.2l88.7,88.7l-5.8,5.8l-0.1-0.1" + "l-8-8.1l-11.1,11.1l11.2,11.2l8-8l0.1,0.1L460.3,246.8z M233.3,177.5h46V165h-46V177.5z M290.6,247.8c-6.8-8.8-11.8-18.4-14.8-28.7" + "l-11.4,3.6c3.4,11.8,9.1,22.9,17,33L290.6,247.8z M290.7,194.4h-72.1v12.5h32.2l0,0.2c-6.3,21-19,40.4-36.5,56l7.7,9.5" + "c11.7-10.4,21.4-22.3,28.9-35.4l0.2-0.4v74.9h11.9V206.9h27.7V194.4z M381.9,234.4h-89.4v69.2h12.4l2.7-2.2h60.1l2.5,2.2h11.7" + "V234.4z M371.1,226.8v-38.7h-67.5l-0.4,38.7H371.1z M385.3,164.7H289v12.5h96.2V164.7z M452.2,195.4c-0.8,0.9-1.9,1.5-3.1,1.5" + "c-0.2,0-0.5,0-0.7-0.1c-1.4-0.3-2.6-1.3-3.1-2.7c-0.3-0.9-1.4-3.7-2.7-5.3c-1.1-1.3-1.8-2.9-2.3-4.6c-1.9-0.4-3.8-1.3-5.2-2.6" + "c-1.6-1.3-4.3-2.5-5.2-2.9c-1.4-0.5-2.3-1.7-2.6-3.1c-0.2-1.4,0.3-2.9,1.5-3.8c0.5-0.4,1.5-1.3,2.5-2.4L400,138.3" + "c-1.3,0.3-2.6,0.7-4.2,1.3c-3.7,1.3-11.3,2.6-16.8,1c-0.5-0.1-0.9-0.2-1.3-0.3l89,89l-8.9,8.9l8.6,8.6l-44.9,44.9L399,314.4" + "c6.5,2.6,10.9,7,13.5,11.1l87.3-87.3l-45.3-45.3C453.5,193.9,452.5,194.9,452.2,195.4z'/>" + "</g></svg>";

/**
 * 矩形.封装矩形对应的行为.
 *
 * @param x 横坐标.
 * @param y 纵坐标.
 * @param width 宽度.
 * @param height 高度.
 * @returns {{}} 矩形对象.
 */
const eraserRect = (x, y, width, height) => {
    const self = {};
    self.x = x;
    self.y = y;
    self.width = width;
    self.height = height;

    // 矩形的四个顶点.
    const pointNW = { x: x, y: y };
    const pointNE = { x: x + width, y: y };
    const pointSE = { x: x + width, y: y + height };
    const pointSW = { x: x, y: y + height };

    // 矩形的四个边.
    const borders = [
        lineSegment(pointNW, pointNE),
        lineSegment(pointNW, pointSW),
        lineSegment(pointSW, pointSE),
        lineSegment(pointSE, pointNE)
    ];

    /**
     * 是否在矩形中，不包含边界.
     *
     * @param point 坐标点.
     * @returns {*|boolean} true/false.
     */
    self.in = (point) => {
        return isPointInRect(point, { x, y, width, height }) && !self.onBorder(point);
    }

    /**
     * 是否包含在矩形中(包含边界).
     *
     * @param point 坐标点.
     * @returns {*|boolean} true/false.
     */
    self.contains = (point) => {
        return isPointInRect(point, { x, y, width, height });
    }

    /**
     * 判断坐标是否在矩形的四条边上.
     *
     * @param point 坐标点.
     * @returns {*} true/false.
     */
    self.onBorder = (point) => {
        return borders.some(border => border.onSegment(point));
    }

    /**
     * 求线和矩形的交点.
     *
     * @param eraserLine 线段.
     * @returns {*[]} 交点数组.
     */
    self.intersectionsWithLine = (eraserLine) => {
        const intersections = [];
        borders.forEach(border => {
            const intersection = border.intersection(eraserLine);
            if (intersection && !self.isVertex(intersection)) {
                intersections.push(intersection);
            }
        });
        return intersections;
    }

    /**
     * 是否是四个顶点之一.
     *
     * @param point 待判断的点.
     * @returns {boolean} true/false.
     */
    self.isVertex = (point) => {
        return (pointNE.x === point.x && pointNE.y === point.y)
            || (pointNW.x === point.x && pointNW.y === point.y)
            || (pointSE.x === point.x && pointSE.y === point.y)
            || (pointNE.x === point.x && pointNE.y === point.y)
    }

    return self;
}

/**
 * 根据两点式构建线段.
 *
 * @param point1 点1.
 * @param point2 点2.
 */
const lineSegment = (point1, point2) => {
    const self = {};
    self.point1 = point1;
    self.point2 = point2;

    // 直线一般式的参数.ax + by + c = 0 的形式.
    self.a = point2.y - point1.y;
    self.b = point1.x - point2.x;
    self.c = (point2.x - point1.x) * point1.y - (point2.y - point1.y) * point1.x;

    /**
     * 求交点.
     *
     * @param otherLine 其他的线.
     * @returns {null|{x: number, y: number}} 没有交点则返回null，否则返回交点.
     */
    self.intersection = (otherLine) => {
        const denominator = otherLine.a * self.b - self.a * otherLine.b;
        if (denominator === 0) {
            return null;
        }

        // 因为坐标系都是正数，因此需要取绝对值.
        const x = Math.abs(-(self.b * otherLine.c - otherLine.b * self.c) / denominator);
        const y = Math.abs((self.a * otherLine.c - otherLine.a * self.c) / denominator);
        if (self.onSegment({ x, y }) && otherLine.onSegment({ x, y })) {
            return { x, y }
        }
        return null;
    }

    /**
     * 判断点是否在线段上.
     *
     * @param point 点.
     * @returns {boolean} true/false.
     */
    self.onSegment = (point) => {
        const minX = Math.min(point1.x, point2.x);
        const maxX = Math.max(point1.x, point2.x);
        const minY = Math.min(point1.y, point2.y);
        const maxY = Math.max(point1.y, point2.y);

        // 计算结果有可能是小数.这里取近似值即可,直接等于0，会导致有些点无法删除的问题.
        const diff = (point.x - point1.x) * (point2.y - point1.y) - (point2.x - point1.x) * (point.y - point1.y);
        return diff < 0.01
            && point.x >= minX && point.x <= maxX
            && point.y >= minY && point.y <= maxY;
    }

    return self;
}

export { svg, customShape };//, freeLine };