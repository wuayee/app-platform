/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
 * Description:
 * Author: auto generated by FIT IDL
 * Date:
 */

#ifndef COM_HUAWEI_FIT_HEARTBEAT_HEARTBEATCOMMON_C_H
#define COM_HUAWEI_FIT_HEARTBEAT_HEARTBEATCOMMON_C_H

#include <component/com_huawei_fit_registry_registry_common/1.0.0/cplusplus/registryCommon.hpp>
#include <fit/stl/string.hpp>
#include <fit/memory/fit_base.hpp>

namespace fit {
namespace heartbeat {
struct BeatInfo : public FitBase {
    // 心跳场景类型，fit-registry[registry-client心跳的场景类型], fit-registry-server
    Fit::string sceneType {};
    // 心跳周期 (ms)
    int64_t interval {};
    // 最大存活时长（ms,心跳后的有效期，有效期内无心跳则认为离线）
    int64_t aliveTime {};
    // 首次延迟时长（ms, 用于首次增加最大存活时长，用于启动期心跳不稳定的情况）
    int64_t initDelay {};
    // 心跳状态变化通知接收方的fitid,genericable为heartbeatAddressChange
    Fit::string callbackFitId {};
};

struct SubscribeBeatInfo : public FitBase {
    // 订阅的心跳场景类型，表示关注该场景下的所有节点的心跳状态变化
    Fit::string sceneType {};
    // 所订阅场景的心跳状态变化时通知订阅者的fitid，genericable为heartbeatAddressChange
    Fit::string callbackFitId {};
    Fit::string mode {};
};

struct HeartbeatEvent : public FitBase {
    // 心跳发生变化的场景类型
    Fit::string sceneType {};
    // 事件类型， 在线-RUN_STATE_ONLINE， 离线-RUN_STATE_OFFLINE
    Fit::string eventType {};
    // 心跳变化的节点地址信息
    ::fit::registry::Address *address { nullptr };
};
}
}

#endif