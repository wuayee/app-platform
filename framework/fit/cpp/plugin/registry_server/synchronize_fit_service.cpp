/*
* Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
* Description:
* Author: auto generated by FIT IDL
* Date:
*/

#include <genericable/com_huawei_fit_hakuna_kernel_registry_server_synchronize_fit_service/1.0.0/cplusplus/synchronizeFitService.hpp>
#include <fit/external/framework/annotation/fitable_registrar.hpp>
#include <fit/fit_log.h>
#include <fit/internal/registry/registry_util.h>
#include <registry_server_memory/common/util.h>
#include "core/fit_registry_mgr.h"
using namespace Fit::Registry;
namespace {
void BuildServiceInfoByApplicationInstance(db_service_info_t& serviceInfo,
    const ::fit::hakuna::kernel::registry::shared::ApplicationInstance& applicationInstance)
{
    serviceInfo.service.application.name = applicationInstance.application->name;
    serviceInfo.service.application.nameVersion = applicationInstance.application->nameVersion;
    Fit::fit_format_type_set formats;
    for (const auto& format : applicationInstance.formats) {
        formats.push_back(static_cast<Fit::fit_format_type>(format));
    }
    for (const auto& worker : applicationInstance.workers) {
        serviceInfo.service.timeoutSeconds = worker.expire;
        for (const auto& address : worker.addresses) {
            Fit::fit_address addressTemp;
            addressTemp.environment = worker.environment;
            addressTemp.formats = formats;
            addressTemp.id = worker.id;
            addressTemp.ip = address.host;
            addressTemp.extensions = worker.extensions;
            for (const auto& endpoint : address.endpoints) {
                addressTemp.port = endpoint.port;
                addressTemp.protocol = static_cast<Fit::fit_protocol_type>(endpoint.protocol);
                serviceInfo.service.addresses.emplace_back(addressTemp);
            }
        }
    }
}
db_service_info_t ConvertTo(
    const ::fit::hakuna::kernel::registry::shared::FitableInstance& fitableInstance, time_t currentTime)
{
    db_service_info_t serviceInfo;
    serviceInfo.service.fitable = RegistryUtil::ConvertHakunaFitableToFitableId(*(fitableInstance.fitable));
    serviceInfo.start_time = currentTime;
    serviceInfo.service.aliases = fitableInstance.aliases;
    serviceInfo.service.tags = fitableInstance.tags;
    serviceInfo.service.extensions = fitableInstance.extensions;

    for (const auto& applicationInstance : fitableInstance.applicationInstances) {
        BuildServiceInfoByApplicationInstance(serviceInfo, applicationInstance);
    }
    return serviceInfo;
}
FitCode SynchronizeFitService(ContextObj ctx,
    const Fit::vector<::fit::hakuna::kernel::registry::server::SyncSeviceAddress> *syncSeviceAddress,
    int32_t **result)
{
    if (syncSeviceAddress == nullptr) {
        FIT_LOG_ERROR("%s", "Null syncSeviceAddress.");
        return FIT_ERR_PARAM;
    }

    FIT_LOG_DEBUG("SynchronizeFitService in, size is %lu.", (*syncSeviceAddress).size());
    const time_t currentTime = time(nullptr);
    for (const auto& it : *syncSeviceAddress) {
        if (it.fitableInstance->applicationInstances.empty()
            || it.fitableInstance->applicationInstances.front().workers.empty()) {
            continue;
        }
        db_service_info_t serviceInfo = ConvertTo(*(it.fitableInstance), currentTime);
        if (it.operateType == 0) {
            fit_registry_mgr::instance()->get_registry_service().SyncSave(serviceInfo);
            for (auto& app : it.fitableInstance->applicationInstances) {
                TrySaveApplicationMeta(*app.application);
            }
        } else if (it.operateType == 1) {
            fit_registry_mgr::instance()->get_registry_service().SyncRemove(serviceInfo);
        }
    }
    *result = Fit::Context::NewObj<int32_t>(ctx);
    if (*result == nullptr) {
        FIT_LOG_ERROR("%s", "New result failed.");
        return FIT_ERR_FAIL;
    }
    **result = FIT_ERR_SUCCESS;
    return FIT_ERR_SUCCESS;
}

FIT_REGISTRATIONS
{
    ::Fit::Framework::Annotation::Fitable(::SynchronizeFitService)
        .SetGenericId(fit::hakuna::kernel::registry::server::synchronizeFitService::GENERIC_ID)
        .SetFitableId("202954b6897a4e2da49aa29ac572f5fb");
}
} // LCOV_EXCL_LINE