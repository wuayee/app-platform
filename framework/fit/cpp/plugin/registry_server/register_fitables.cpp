/*
* Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
* Description:
* Author: auto generated by FIT IDL
* Date:
*/
#include <fit/fit_log.h>
#include <fit/external/framework/annotation/fitable_registrar.hpp>
#include <genericable/com_huawei_fit_hakuna_kernel_registry_server_register_fitables/1.0.0/cplusplus/registerFitables.hpp>
#include <registry_server_memory/common/registry_common_converter.hpp>
#include <registry_server_memory/common/util.h>
#include "core/fit_registry_mgr.h"
#include "core/fit_registry_conf.h"

using namespace Fit;
using namespace Fit::Registry;
namespace {
/**
 * @param fitableMetas
 * @param worker
 */
FitCode RegisterFitables(ContextObj ctx,
    const Fit::vector<::fit::hakuna::kernel::registry::shared::FitableMeta> *fitableMetas,
    const ::fit::hakuna::kernel::registry::shared::Worker *worker,
    const ::fit::hakuna::kernel::registry::shared::Application *application)
{
    FIT_LOG_DEBUG("Enter registerFitables.");
    if (fitableMetas == nullptr || worker == nullptr || application == nullptr) {
        FIT_LOG_ERROR("%s", "Invalid fitableMetas or worker.");
        return FIT_ERR_PARAM;
    }
    if (worker->id.length() > MAX_WORKER_ID_LEN) {
        FIT_LOG_CORE("Worker id is longer than max len, id is %s, size is %lu.",
            worker->id.c_str(), worker->id.length());
        return FIT_ERR_PARAM;
    }

    uint32_t timeout = Fit::Registry::GetFitableDefaultExpiredTimeSeconds();
    if (worker->expire > 0) {
        timeout = static_cast<uint32_t>(worker->expire);
    }
    Fit::vector<Fit::fit_address> innerAddresses = ::Fit::RegistryCommonConverter::ConvertToFitAddresses(*worker);
    fit_service_instance_set serviceInstances;
    for (auto &fitable : *fitableMetas) {
        fit_service_instance_t instance;
        Fit::fit_format_type_set formats;
        for (const auto& it : fitable.formats) {
            formats.push_back(static_cast<Fit::fit_format_type>(it));
        }
        for (auto& innerAddress : innerAddresses) {
            innerAddress.formats = formats;
        }
        instance.addresses = innerAddresses;
        instance.fitable = ::Fit::RegistryCommonConverter::Convert(*fitable.fitable);
        instance.timeoutSeconds = timeout;
        instance.application = Fit::RegistryCommonConverter::Convert(*application);
        instance.aliases = fitable.aliases;
        instance.tags = fitable.tags;
        instance.extensions = fitable.extensions;
        sort(instance.aliases.begin(), instance.aliases.end());
        sort(instance.tags.begin(), instance.tags.end());
        serviceInstances.push_back(instance);
    }
    TrySaveApplicationMeta(*application);
    Fit::Registry::fit_registry_mgr::instance()->get_registry_service().register_services(
        serviceInstances);

    FIT_LOG_DEBUG("Exit.");
    return FIT_ERR_SUCCESS;
}

FIT_REGISTRATIONS
{
    ::Fit::Framework::Annotation::Fitable(::RegisterFitables)
        .SetGenericId(fit::hakuna::kernel::registry::server::registerFitables::GENERIC_ID)
        .SetFitableId("dedaa28cfb2742819a9b0271bc34f72a");
}
} // LCOV_EXCL_LINE