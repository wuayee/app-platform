/*
* Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
* Description:
* Author: auto generated by FIT IDL
* Date:
*/
#include <fit/fit_log.h>
#include <fit/external/framework/annotation/fitable_registrar.hpp>
#include <genericable/com_huawei_fit_hakuna_kernel_registry_server_sync_subscription_fit_service/1.0.0/cplusplus/syncSubscriptionFitService.hpp>
#include <registry_server_memory/common/registry_common_converter.hpp>
#include "core/fit_registry_mgr.h"
using namespace Fit::Registry;
namespace {
FitCode SyncSubscriptionFitService(ContextObj ctx,
    const Fit::vector<::fit::hakuna::kernel::registry::server::SyncSubscriptionService> *syncSubscriptionService,
    int32_t **result)
{
    if (syncSubscriptionService == nullptr) {
        FIT_LOG_ERROR("syncSubscriptionService is nullptr.");
        return FIT_ERR_PARAM;
    }

    for (const auto& it : *syncSubscriptionService) {
        auto key = get_fitable_key_from_fitable(::Fit::RegistryCommonConverter::Convert(*(it.fitable)));
        listener_t listenerAddress;
        listenerAddress.fitable_id = it.callbackFitId;
        listenerAddress.address = ::Fit::RegistryCommonConverter::Convert(*(it.listenerAddress));
        listenerAddress.syncCount = DEFAULT_SYNC_COUNT;

        FIT_LOG_INFO("The subscription is received. (fitable=%s:%s, listener=%s:%s, operateType=%d).",
            key.generic_id.c_str(), key.fitable_id.c_str(), listenerAddress.address.id.c_str(),
            listenerAddress.fitable_id.c_str(), it.operateType);
        if (it.operateType == 0) {
            fit_registry_mgr::instance()->get_subscription_service().SyncInsertSubscriptionEntry(key, listenerAddress);
        } else if (it.operateType == 1) {
            fit_registry_mgr::instance()->get_subscription_service().SyncRemoveSubscriptionEntry(key, listenerAddress);
        }
    }
    *result = ::Fit::Context::NewObj<int32_t>(ctx);
    if (*result == nullptr) {
        FIT_LOG_ERROR("%s", "New result failed.");
        return FIT_ERR_FAIL;
    }
    **result = FIT_ERR_SUCCESS;
    return FIT_ERR_SUCCESS;
}

FIT_REGISTRATIONS
{
    ::Fit::Framework::Annotation::Fitable(::SyncSubscriptionFitService)
        .SetGenericId(fit::hakuna::kernel::registry::server::syncSubscriptionFitService::GENERIC_ID)
        .SetFitableId("3e259b5ed7f84aa692e297806b2f0901");
}
} // LCOV_EXCL_LINE