/*
* Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
* Description:
* Author: auto generated by FIT IDL
* Date:
*/
#include <fit/fit_log.h>
#include <fit/external/framework/annotation/fitable_registrar.hpp>
#include <genericable/com_huawei_fit_hakuna_kernel_registry_server_subscribe_fitables/1.0.0/cplusplus/subscribeFitables.hpp>
#include <registry_server_memory/common/registry_common_converter.hpp>
#include <registry_server_memory/common/util.h>
#include "core/fit_registry_mgr.h"
#include "registry/repository/fit_registry_application_repo.h"

using namespace Fit;
using namespace Fit::Registry;
namespace {
/**
 * @param fitables
 * @param workerId
 * @param callbackFitableId
 * @return
 */
FitCode SubscribeFitables(ContextObj ctx,
    const Fit::vector<::fit::hakuna::kernel::shared::Fitable> *fitables,
    const Fit::string *workerId,
    const Fit::string *callbackFitableId,
    Fit::vector<::fit::hakuna::kernel::registry::shared::FitableInstance> **result)
{
    if (fitables == nullptr || workerId == nullptr || callbackFitableId == nullptr) {
        FIT_LOG_ERROR("%s", "Null fitables or workerId or callbackFitableId.");
        return FIT_ERR_PARAM;
    }

    if (workerId->length() > MAX_WORKER_ID_LEN) {
        FIT_LOG_CORE("Worker id is longer than max len, id is %s, size is %lu.",
            workerId->c_str(), workerId->length());
        return FIT_ERR_PARAM;
    }
    auto resultTemp
        = Fit::Context::NewObj<Fit::vector<::fit::hakuna::kernel::registry::shared::FitableInstance>>(ctx);
    for (const auto &fitable : *fitables) {
        listener_t listener;
        listener.fitable_id = *callbackFitableId;
        // 没有address
        listener.address.id = *workerId;
        listener.syncCount = DEFAULT_SYNC_COUNT;
        Fit::Registry::fit_registry_mgr::instance()->get_subscription_service().insert_subscription_entry(
            get_fitable_key_from_fitable(::Fit::RegistryCommonConverter::Convert(fitable)), listener);

        fit_fitable_key_t key;
        key.generic_id = fitable.genericableId;
        key.generic_version = fitable.genericableVersion;
        key.fitable_id = fitable.fitableId;
        CompatibleJavaRegistry(key);
        auto services = Fit::Registry::fit_registry_mgr::instance()->get_registry_service().get_services(key);
        FIT_LOG_DEBUG("Subscribe fitable=(%s:%s), size=%ld.", fitable.genericableId.c_str(),
            fitable.fitableId.c_str(), services.size());
        resultTemp->emplace_back(Aggregate(fitable, services, ctx));
    }
    *result = resultTemp;
    return FIT_ERR_SUCCESS;
}

FIT_REGISTRATIONS
{
    ::Fit::Framework::Annotation::Fitable(::SubscribeFitables)
        .SetGenericId(fit::hakuna::kernel::registry::server::subscribeFitables::GENERIC_ID)
        .SetFitableId("ee0a8337d3654a22a548d5d5abe1d5f3");
}
} // LCOV_EXCL_LINE