# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ApplyPermissionMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ApplyPermissionMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsApplyPermissionMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ApplyPermissionMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ApplyPermissionMessage
    def Permission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ApplyPermissionMessage
    def ObjectKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ApplyPermissionMessage
    def MemoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # ApplyPermissionMessage
    def IsOperatingUserData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ApplyPermissionMessage
    def UserData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ApplyPermissionMessage
    def UserDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # ApplyPermissionMessage
    def UserDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ApplyPermissionMessage
    def UserDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ApplyPermissionMessageStart(builder):
    builder.StartObject(5)

def Start(builder):
    ApplyPermissionMessageStart(builder)

def ApplyPermissionMessageAddPermission(builder, permission):
    builder.PrependInt8Slot(0, permission, 0)

def AddPermission(builder, permission):
    ApplyPermissionMessageAddPermission(builder, permission)

def ApplyPermissionMessageAddObjectKey(builder, objectKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(objectKey), 0)

def AddObjectKey(builder, objectKey):
    ApplyPermissionMessageAddObjectKey(builder, objectKey)

def ApplyPermissionMessageAddMemoryKey(builder, memoryKey):
    builder.PrependInt32Slot(2, memoryKey, -1)

def AddMemoryKey(builder, memoryKey):
    ApplyPermissionMessageAddMemoryKey(builder, memoryKey)

def ApplyPermissionMessageAddIsOperatingUserData(builder, isOperatingUserData):
    builder.PrependBoolSlot(3, isOperatingUserData, 0)

def AddIsOperatingUserData(builder, isOperatingUserData):
    ApplyPermissionMessageAddIsOperatingUserData(builder, isOperatingUserData)

def ApplyPermissionMessageAddUserData(builder, userData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(userData), 0)

def AddUserData(builder, userData):
    ApplyPermissionMessageAddUserData(builder, userData)

def ApplyPermissionMessageStartUserDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartUserDataVector(builder, numElems: int) -> int:
    return ApplyPermissionMessageStartUserDataVector(builder, numElems)

def ApplyPermissionMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return ApplyPermissionMessageEnd(builder)
