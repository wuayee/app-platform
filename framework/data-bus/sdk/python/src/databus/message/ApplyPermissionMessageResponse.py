# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ApplyPermissionMessageResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ApplyPermissionMessageResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsApplyPermissionMessageResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ApplyPermissionMessageResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ApplyPermissionMessageResponse
    def ErrorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ApplyPermissionMessageResponse
    def Granted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ApplyPermissionMessageResponse
    def MemoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ApplyPermissionMessageResponse
    def MemorySize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ApplyPermissionMessageResponse
    def UserData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ApplyPermissionMessageResponse
    def UserDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # ApplyPermissionMessageResponse
    def UserDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ApplyPermissionMessageResponse
    def UserDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ApplyPermissionMessageResponseStart(builder):
    builder.StartObject(5)

def Start(builder):
    ApplyPermissionMessageResponseStart(builder)

def ApplyPermissionMessageResponseAddErrorType(builder, errorType):
    builder.PrependInt8Slot(0, errorType, 0)

def AddErrorType(builder, errorType):
    ApplyPermissionMessageResponseAddErrorType(builder, errorType)

def ApplyPermissionMessageResponseAddGranted(builder, granted):
    builder.PrependBoolSlot(1, granted, 0)

def AddGranted(builder, granted):
    ApplyPermissionMessageResponseAddGranted(builder, granted)

def ApplyPermissionMessageResponseAddMemoryKey(builder, memoryKey):
    builder.PrependInt32Slot(2, memoryKey, 0)

def AddMemoryKey(builder, memoryKey):
    ApplyPermissionMessageResponseAddMemoryKey(builder, memoryKey)

def ApplyPermissionMessageResponseAddMemorySize(builder, memorySize):
    builder.PrependUint64Slot(3, memorySize, 0)

def AddMemorySize(builder, memorySize):
    ApplyPermissionMessageResponseAddMemorySize(builder, memorySize)

def ApplyPermissionMessageResponseAddUserData(builder, userData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(userData), 0)

def AddUserData(builder, userData):
    ApplyPermissionMessageResponseAddUserData(builder, userData)

def ApplyPermissionMessageResponseStartUserDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartUserDataVector(builder, numElems: int) -> int:
    return ApplyPermissionMessageResponseStartUserDataVector(builder, numElems)

def ApplyPermissionMessageResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return ApplyPermissionMessageResponseEnd(builder)
