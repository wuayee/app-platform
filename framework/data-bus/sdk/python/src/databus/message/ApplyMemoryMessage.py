# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ApplyMemoryMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ApplyMemoryMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsApplyMemoryMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ApplyMemoryMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ApplyMemoryMessage
    def ObjectKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ApplyMemoryMessage
    def MemorySize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ApplyMemoryMessageStart(builder):
    builder.StartObject(2)

def Start(builder):
    ApplyMemoryMessageStart(builder)

def ApplyMemoryMessageAddObjectKey(builder, objectKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectKey), 0)

def AddObjectKey(builder, objectKey):
    ApplyMemoryMessageAddObjectKey(builder, objectKey)

def ApplyMemoryMessageAddMemorySize(builder, memorySize):
    builder.PrependUint64Slot(1, memorySize, 0)

def AddMemorySize(builder, memorySize):
    ApplyMemoryMessageAddMemorySize(builder, memorySize)

def ApplyMemoryMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return ApplyMemoryMessageEnd(builder)
