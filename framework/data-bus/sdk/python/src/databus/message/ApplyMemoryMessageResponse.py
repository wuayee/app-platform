# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ApplyMemoryMessageResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ApplyMemoryMessageResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsApplyMemoryMessageResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ApplyMemoryMessageResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ApplyMemoryMessageResponse
    def ErrorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ApplyMemoryMessageResponse
    def MemoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ApplyMemoryMessageResponse
    def MemorySize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ApplyMemoryMessageResponseStart(builder):
    builder.StartObject(3)

def Start(builder):
    ApplyMemoryMessageResponseStart(builder)

def ApplyMemoryMessageResponseAddErrorType(builder, errorType):
    builder.PrependInt8Slot(0, errorType, 0)

def AddErrorType(builder, errorType):
    ApplyMemoryMessageResponseAddErrorType(builder, errorType)

def ApplyMemoryMessageResponseAddMemoryKey(builder, memoryKey):
    builder.PrependInt32Slot(1, memoryKey, 0)

def AddMemoryKey(builder, memoryKey):
    ApplyMemoryMessageResponseAddMemoryKey(builder, memoryKey)

def ApplyMemoryMessageResponseAddMemorySize(builder, memorySize):
    builder.PrependUint64Slot(2, memorySize, 0)

def AddMemorySize(builder, memorySize):
    ApplyMemoryMessageResponseAddMemorySize(builder, memorySize)

def ApplyMemoryMessageResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return ApplyMemoryMessageResponseEnd(builder)
