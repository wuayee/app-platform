<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huawei.fit.jober.taskcenter.dao.TriggerMapper">
    <resultMap id="objectMap"
               type="com.huawei.fit.jober.taskcenter.dao.po.TriggerObject">
        <id column="id" property="id"/>
        <result column="task_source_id" property="taskSourceId"/>
        <result column="task_property_id" property="taskPropertyId"/>
        <result column="fitable_id" property="fitableId"/>
    </resultMap>

    <sql id="table">task_property_trigger</sql>

    <sql id="columns">id, task_source_id, fitable_id, task_property_id</sql>

    <sql id="triggerFilter">
        <where>
            1=1
            <if test="ids != null and ids.size != 0">
                AND id IN
                <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="sourceIds != null and sourceIds.size != 0">
                AND task_source_id IN
                <foreach item="item" index="index" collection="sourceIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="propertyIds != null and propertyIds.size != 0">
                AND task_property_id IN
                <foreach item="item" index="index" collection="propertyIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="fitableIds != null and fitableIds.size != 0">
                AND fitable_id IN
                <foreach item="item" index="index" collection="fitableIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="create">
        INSERT INTO
        <include refid="table"/>
        (<include refid="columns"/>)
        VALUES(#{entity.id}, #{entity.taskSourceId},#{entity.fitableId}, #{entity.taskPropertyId})
    </insert>

    <select id="batchSave" resultType="java.lang.String">
        INSERT INTO
        <include refid="table"/>
        (<include refid="columns"/>)
        VALUES
        <foreach collection="declarations" item="item" separator=",">
            (#{item.id}, #{item.taskSourceId},#{item.fitableId}, #{item.taskPropertyId})
        </foreach>
        ON CONFLICT (task_source_id, task_property_id, fitable_id) DO UPDATE SET task_source_id = EXCLUDED.task_source_id RETURNING id
    </select>

    <delete id="batchDelete">
        DELETE FROM<include refid="table"/>WHERE task_source_id IN
        <foreach collection="taskSourceIds" item="taskSourceId" index="index" separator="," open="(" close=")">
            #{taskSourceId}
        </foreach>
        AND id NOT IN
        <foreach collection="triggerIds" item="triggerId" index="index" separator="," open="(" close=")">
            #{triggerId}
        </foreach>
    </delete>

    <select id="selectTaskPropertyIdByTaskIdAndName" resultType="java.lang.String">
        SELECT "id"
        FROM "task_property"
        WHERE "task_id" = #{taskId}
          AND "name" = #{propertyName}
    </select>

    <select id="selectTriggerByTaskId" resultMap="objectMap">
        select s.id as taskSourceId, ss.fitable_id as fitableId, p.id as taskPropertyId
        from task_source s
                 left join task_source_schedule ss
                           on s.id = ss.id
                 LEFT JOIN task_property p
                           on s.task_id = p.task_id and p.name = #{propertyName}
        where s.id = #{sourceId}
          and s.task_id = #{taskId}
          and ss.fitable_id is not null
          and p.id is not null
            limit 1
    </select>

    <select id="retrieve" resultType="com.huawei.fit.jober.taskcenter.domain.TriggerEntity">
        select
        id, fitable_id as fitableId, task_property_id as taskPropertyId
        from
        <include refid="table"/>
        where id = #{triggerId}
        limit 1
    </select>

    <delete id="delete">
        DELETE FROM
        <include refid="table"/>
        <include refid="triggerFilter"/>
    </delete>

    <select id="list" resultMap="objectMap">
        select
        <include refid="columns"/>
        from
        <include refid="table"/>
        <include refid="triggerFilter"/>
    </select>
</mapper>